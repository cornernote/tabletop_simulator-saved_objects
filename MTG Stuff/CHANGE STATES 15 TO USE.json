{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "59a832",
      "Name": "Custom_Model",
      "Transform": {
        "posX": 23.2649956,
        "posY": 1.04127669,
        "posZ": 6.750002,
        "rotX": 1.55793612E-06,
        "rotY": 180.0,
        "rotZ": -0.00163233827,
        "scaleX": 2.18840027,
        "scaleY": 0.0999999046,
        "scaleZ": 3.05631256
      },
      "Nickname": "CHANGE STATES 1-5 TO USE ",
      "Description": "Delete when done! ",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/1666858152071990826/9AD455F2CBAEC01B2CBCDDB8B6DC4CE48D14B545/",
        "DiffuseURL": "",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "CastShadows": true
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "States": {
        "2": {
          "GUID": "75e740",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -31.75,
            "posY": 1.0500015,
            "posZ": 19.25,
            "rotX": 2.63197967E-06,
            "rotY": 0.0111030545,
            "rotZ": -8.501877E-08,
            "scaleX": 0.692020833,
            "scaleY": 1.0,
            "scaleZ": 0.692020833
          },
          "Nickname": "Deck Data Fetcher",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": true,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/2054246290654730230/574770E18934E075717D6EF81B675496C3758831/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "--By π, adapting Amuzet's scryfall search code\r\nmod_name='Deck Data Fetcher'\r\nversion='[i]π[/i]'\r\n\r\nfunction onLoad()\r\n   self.interactable = true\r\n\r\n  sScale=self.getScale()\r\n\r\n   bpars={ click_function='click',\r\n          function_owner=self,\r\n          label='FETCH',\r\n          position={0,-0.02,-2.7},\r\n          scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n          color={0.1,0.1,0.1},\r\n          font_color={1,1,1},\r\n          width=0,\r\n          height=0,\r\n          font_size=500,\r\n          tooltip='' }\r\n  self.createButton(bpars)\r\n\r\n  bpars={ click_function='click',\r\n          function_owner=self,\r\n          label='',\r\n          position={0,-0.02,-2.7},\r\n          scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n          color={0.1,0.1,0.1,0.9},\r\n          font_color={1,1,1},\r\n          width=3000,\r\n          height=750,\r\n          font_size=500,\r\n          tooltip='' }\r\n  self.createButton(bpars)\r\n\r\nend\r\n\r\nfunction click(o,pc,a)\r\n  if getObjectFromGUID(self.getGMNotes())~=nil then\r\n    fixDeckText(getObjectFromGUID(self.getGMNotes()),pc)\r\n    self.setGMNotes('')\r\n    self.editButton({\r\n      index=0,\r\n      label='Place Deck'\r\n    })\r\n  end\r\nend\r\n\r\nfunction onCollisionEnter(info)\r\n  if info.collision_object.type=='Deck' then\r\n    local g = info.collision_object.getGUID()\r\n    self.setGMNotes(g)\r\n    self.editButton({\r\n      index=0,\r\n      label='Fetch Card Data'\r\n    })\r\n  end\r\nend\r\n\r\n-- function onCollisionExit(info)\r\n--   if info.collision_object.type=='Deck' then\r\n--     self.setGMNotes('')\r\n--     self.editButton({\r\n--       index=0,\r\n--       label='Place Deck'\r\n--     })\r\n--   end\r\n-- end\r\n\r\nfunction fixDeckText(deck,ply)\r\n  if deck==nil then return end\r\n  if deck.type~='Deck' then return end\r\n  local col=stringColorToRGB(ply)\r\n  col[4]=100\r\n  local colHex='['..Color[ply]:toHex()..']'\r\n  deckData = deck.getData()\r\n  deck.interactable=false\r\n  deck.hide_when_face_down=false\r\n  local bpars={click_function='null',label='fetching data\\nfrom scryfall',\r\n    width=0,height=0,scale={0.3,0.3,0.3},font_size=500,\r\n    position={0,6,0},rotation={0,0,0},color={0,0,0,0},font_color=col}\r\n  self.createButton(bpars)\r\n\r\n  ncards=0\r\n  npross=0\r\n\tfor i,card in ipairs(deckData.ContainedObjects) do\r\n    ncards=ncards+1\r\n    if card.Nickname == nil or card.Nickname == \"\" then\r\n      Player[ply].broadcast(\"error for card #\"..i..\": \"..' [i]no name on card = no way to fetch data[/i]',{1,0.6,0.6})\r\n      npross=npross+1\r\n    elseif card.Nickname ~= nil and card.Nickname ~= \"\" then\r\n\t\t\tlocal name = card.Nickname:gsub('\\n.*',''):gsub('%[.-%]','')\r\n\t\t\tlocal requestBaseUrl = \"https://api.scryfall.com/cards/named?fuzzy=\"\r\n\t\t\tlocal requestUrl = requestBaseUrl .. encodeString(name)\r\n\t\t\tWebRequest.get(requestUrl, function(webReturn) fixText(webReturn,i,name,ply) end)\r\n\t\telse\r\n      npross=npross+1\r\n    end\r\n\tend\r\n\r\n  Wait.condition(\r\n    function()\r\n      deck.destruct()\r\n      spawnObjectData({data = deckData})\r\n      self.removeButton(2)\r\n      Player[ply].broadcast('Scryfall data fetch for '..colHex..ply..'[-] deck complete.',{0.6,0.6,0.6})\r\n    end, function() return ncards==npross end, 10,\r\n    function()\r\n      Player[ply].broadcast('Scryfall data fetch timed out :(',{0.6,0.6,0.6})\r\n      deck.interactable=true\r\n      deck.hide_when_face_down=true\r\n      self.removeButton(2)\r\n    end)\r\nend\r\n\r\nfunction fixText(webReturn,i,name,ply)\r\n  if webReturn.is_error then\r\n    Player[ply].broadcast(\"error for card #\"..i..\": \"..name,{1,0.6,0.6})\r\n    errorJson(webReturn.text, ply)\r\n  else\r\n    local object = string.match(webReturn.text, '\"object\":\"(.-)\"')\r\n    if object == nil then\r\n      Player[ply].broadcast(\"error for card #\"..i..\": \"..name,{1,0.6,0.6})\r\n      errorJson(webReturn.text, ply)\r\n    else\r\n      local cardDat=deckData.ContainedObjects[i]\r\n      local faceName = cardDat.Nickname:gsub('\\n.*',''):gsub('%[.-%]','')\r\n      local cardName,oracle,oracleID=getCardText(webReturn.text,faceName)\r\n      cardDat.Nickname=cardName\r\n      cardDat.Description=oracle\r\n      cardDat.Memo=oracleID\r\n\r\n      if cardDat.States then\r\n        for i,state in pairs(cardDat.States) do\r\n          local backName=state.Nickname:gsub('\\n.*',''):gsub('%[.-%]','')\r\n          local cardName,oracle,oracleID=getCardText(webReturn.text,backName)\r\n          state.Nickname=cardName\r\n          state.Description=oracle\r\n          state.Memo=oracleID\r\n        end\r\n      end\r\n      deckData.ContainedObjects[i]=cardDat\r\n    end\r\n  end\r\n  npross=npross+1\r\nend\r\n\r\nfunction getCardText(json,name)\r\n  local c = JSONdecode(json)\r\n  c.oracle=''\r\n  if c.card_faces then\r\n    if c.card_faces[2].name:lower():gsub('%W','')==name:lower():gsub('%W','') then\r\n      c.name=c.card_faces[2].name:gsub('\"','')..'\\n'..c.card_faces[2].type_line..' '..c.cmc..'CMC'\r\n      c.oracle=setOracle(c.card_faces[2])\r\n    else\r\n      c.name=c.card_faces[1].name:gsub('\"','')..'\\n'..c.card_faces[1].type_line..' '..c.cmc..'CMC'\r\n      c.oracle=setOracle(c.card_faces[1])\r\n    end\r\n  else\r\n    c.name=c.name:gsub('\"','')..'\\n'..c.type_line..' '..c.cmc..'CMC'\r\n    c.oracle=setOracle(c)\r\n  end\r\n  return c.name,c.oracle,c.oracle_id\r\nend\r\n\r\nfunction setOracle(c)\r\n  if c.power then\r\n    c.oracle_text=c.oracle_text..'\\n[b]'..c.power..'/'..c.toughness..'[/b]'\r\n  elseif c.loyalty then\r\n    c.oracle_text=c.oracle_text..'\\n[b]'..tostring(c.loyalty)..'[/b]'\r\n  end\r\n  return c.oracle_text:gsub('\\\\\"','\"')\r\nend\r\n\r\nfunction errorJson(json, player)\r\n\tlocal json = JSON.decode(json)\r\n\tif json.status == 404 then\r\n\t\tPlayer[player].broadcast(\"Card name not found in scryfall database.\",{1,0.6,0.6})\r\n\telse\r\n\t\tPlayer[player].broadcast(json.details,{1,0.6,0.6})\r\n\tend\r\nend\r\n\r\nfunction encodeString(str)\r\n\tlocal output, t = string.gsub(str,\"[^%w]\",encodeChar)\r\n\treturn output\r\nend\r\n\r\nfunction encodeChar(chr)\r\n\treturn string.format(\"%%%X\",string.byte(chr))\r\nend\r\n\r\n\r\n\r\n--------------------------------------------------------------------------------\r\n-- pie's manual \"JSONdecode\" for scryfall's \"object\":\"card\"\r\n--------------------------------------------------------------------------------\r\n\r\nnormal_card_keys={\r\n  'object',\r\n  'id',\r\n  'oracle_id',\r\n  'name',\r\n  'lang',\r\n  'layout',\r\n  'image_uris',\r\n  'mana_cost',\r\n  'cmc',\r\n  'type_line',\r\n  'oracle_text',\r\n  'loyalty',\r\n  'power',\r\n  'toughness',\r\n  'loyalty',\r\n  'legalities',\r\n  'set',\r\n  'rulings_uri',\r\n  'prints_search_uri',\r\n  'collector_number'\r\n}\r\n\r\nimage_uris_keys={    -- \"image_uris\":{\r\n  'small',\r\n  'normal',\r\n  'large',\r\n  'png',\r\n  'art_crop',\r\n  'border_crop',\r\n}\r\n\r\nlegalities_keys={    -- \"legalities\":{\r\n  'standard',\r\n  'future',\r\n  'historic',\r\n  'gladiator',\r\n  'pioneer',\r\n  'modern',\r\n  'legacy',\r\n  'pauper',\r\n  'vintage',\r\n  'penny',\r\n  'commander',\r\n  'brawl',\r\n  'duel',\r\n  'oldschool',\r\n  'premodern',\r\n}\r\n\r\nrelated_card_keys={     -- \"all_parts\":[{\"object\":\"related_card\",\r\n  'id',\r\n  'component',\r\n  'name',\r\n  'uri',\r\n}\r\n\r\ncard_face_keys={        -- \"card_faces\":[{\"object\":\"card_face\",\r\n  'name',\r\n  'mana_cost',\r\n  'type_line',\r\n  'oracle_text',\r\n  'power',\r\n  'toughness',\r\n  'loyalty',\r\n  'image_uris',\r\n}\r\n\r\n--------------------------------------------------------------------------------\r\n--------------------------------------------------------------------------------\r\nfunction JSONdecode(txt)\r\n  local txtBeginning = txt:sub(1,16)\r\n  local jsonType = txtBeginning:match('{\"object\":\"(%w+)\"')\r\n\r\n  -- not scryfall? use normal JSON.decode\r\n  if not(jsonType=='card' or jsonType=='list') then\r\n    return JSON.decode(txt)\r\n  end\r\n\r\n  ------------------------------------------------------------------------------\r\n  -- parse list: extract each card, and parse it separately\r\n  -- used when one wants to decode a whole list\r\n  if jsonType=='list' then\r\n    local txtBeginning = txt:sub(1,80)\r\n    local nCards=txtBeginning:match('\"total_cards\":(%d+)')\r\n    local cardEnd=0\r\n    local cardDats = {}\r\n    for i=1,nCards do     -- could insert max number cards to parse here\r\n      local cardStart=string.find(txt,'{\"object\":\"card\"',cardEnd+1)\r\n      local cardEnd = findClosingBracket(txt,cardStart)\r\n      local cardDat = JSONdecode(txt:sub(cardStart,cardEnd))\r\n      table.insert(cardDats,cardDat)\r\n    end\r\n    local dat = {object=\"list\",total_cards=nCards,data=cardDats}    --ignoring hast_more...\r\n    return dat\r\n  end\r\n\r\n  ------------------------------------------------------------------------------\r\n  -- parse card\r\n\r\n  txt=txt:gsub('}',',}')    -- comma helps parsing last element in an array\r\n\r\n  local cardDat={}\r\n  local all_parts_i=string.find(txt,'\"all_parts\":')\r\n  local card_faces_i=string.find(txt,'\"card_faces\":')\r\n\r\n  -- if all_parts exist\r\n  if all_parts_i~=nil then\r\n    local st=string.find(txt,'%[',all_parts_i)\r\n    local en=findClosingBracket(txt,st)\r\n    local all_parts_txt = txt:sub(all_parts_i,en)\r\n    local all_parts={}\r\n    -- remove all_parts snip from the main text\r\n    txt=txt:sub(1,all_parts_i-1)..txt:sub(en+2,-1)\r\n    -- parse all_parts_txt for each related_card\r\n    st=1\r\n    local cardN=0\r\n    while st~=nil do\r\n      st=string.find(all_parts_txt,'{\"object\":\"related_card\"',st)\r\n      if st~=nil then\r\n        cardN=cardN+1\r\n        en=findClosingBracket(all_parts_txt,st)\r\n        local related_card_txt=all_parts_txt:sub(st,en)\r\n        st=en\r\n        local s,e=1,1\r\n        local related_card={}\r\n        for i,key in ipairs(related_card_keys) do\r\n          val,s=getKeyValue(related_card_txt,key,s)\r\n          related_card[key]=val\r\n        end\r\n        table.insert(all_parts,related_card)\r\n        if cardN>30 then break end   -- avoid inf loop if something goes strange\r\n      end\r\n      cardDat.all_parts=all_parts\r\n    end\r\n  end\r\n\r\n  -- if card_faces exist\r\n  if card_faces_i~=nil then\r\n    local st=string.find(txt,'%[',card_faces_i)\r\n    local en=findClosingBracket(txt,st)\r\n    local card_faces_txt = txt:sub(card_faces_i,en)\r\n    local card_faces={}\r\n    -- remove card_faces snip from the main text\r\n    txt=txt:sub(1,card_faces_i-1)..txt:sub(en+2,-1)\r\n\r\n    -- parse card_faces_txt for each card_face\r\n    st=1\r\n    local cardN=0\r\n    while st~=nil do\r\n      st=string.find(card_faces_txt,'{\"object\":\"card_face\"',st)\r\n      if st~=nil then\r\n        cardN=cardN+1\r\n        en=findClosingBracket(card_faces_txt,st)\r\n        local card_face_txt=card_faces_txt:sub(st,en)\r\n        st=en\r\n        local s,e=1,1\r\n        local card_face={}\r\n        for i,key in ipairs(card_face_keys) do\r\n          val,s=getKeyValue(card_face_txt,key,s)\r\n          card_face[key]=val\r\n        end\r\n        table.insert(card_faces,card_face)\r\n        if cardN>4 then break end   -- avoid inf loop if something goes strange\r\n      end\r\n      cardDat.card_faces=card_faces\r\n    end\r\n  end\r\n\r\n  -- normal card (or what's left of it after removing card_faces and all_parts)\r\n  st=1\r\n  for i,key in ipairs(normal_card_keys) do\r\n    val,st=getKeyValue(txt,key,st)\r\n    cardDat[key]=val\r\n  end\r\n\r\n  return cardDat\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\n-- returns data for one card at a time from a scryfall's \"object\":\"list\"\r\nfunction getNextCardDatFromList(txt,startHere)\r\n\r\n  if startHere==nil then\r\n    startHere=1\r\n  end\r\n\r\n  local cardStart=string.find(txt,'{\"object\":\"card\"',startHere)\r\n  if cardStart==nil then\r\n    print('error: no more cards in list')\r\n    startHere=nil\r\n    return nil,nil,nil\r\n  end\r\n\r\n  local cardEnd = findClosingBracket(txt,cardStart)\r\n  if cardEnd==nil then\r\n    print('error: no more cards in list')\r\n    startHere=nil\r\n    return nil,nil,nil\r\n  end\r\n\r\n  -- startHere is not a local variable, so it's possible to just do:\r\n  -- getNextCardFromList(txt) and it will keep giving the next card or nil if there's no more\r\n  startHere=cardEnd+1\r\n\r\n  local cardDat = JSONdecode(txt:sub(cardStart,cardEnd))\r\n\r\n  return cardDat,cardStart,cardEnd\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\nfunction findClosingBracket(txt,st)   -- find paired {} or []\r\n  local ob,cb='{','}'\r\n  local pattern='[{}]'\r\n  if txt:sub(st,st)=='[' then\r\n    ob,cb='[',']'\r\n    pattern='[%[%]]'\r\n  end\r\n  local txti=st\r\n  local nopen=1\r\n  while nopen>0 do\r\n    txti=string.find(txt,pattern,txti+1)\r\n    if txt:sub(txti,txti)==ob then\r\n      nopen=nopen+1\r\n    elseif txt:sub(txti,txti)==cb then\r\n      nopen=nopen-1\r\n    end\r\n  end\r\n  return txti\r\nend\r\n\r\n--------------------------------------------------------------------------------\r\nfunction getKeyValue(txt,key,st)\r\n  local str='\"'..key..'\":'\r\n  local st=string.find(txt,str,st)\r\n  local en=nil\r\n  local value=nil\r\n  if st~=nil then\r\n    if key=='image_uris' then     -- special case for scryfall's image_uris table\r\n      value={}\r\n      local s=st\r\n      for i,k in ipairs(image_uris_keys) do\r\n        local val,s=getKeyValue(txt,k,s)\r\n        value[k]=val\r\n      end\r\n      en=s\r\n    elseif txt:sub(st+#str,st+#str)~='\"' then      -- not a string\r\n      en=string.find(txt,',\"',st+#str+1)\r\n      value=tonumber(txt:sub(st+#str,en-1))\r\n    else                                           -- a string\r\n      en=string.find(txt,'\",',st+#str+1)\r\n      value=txt:sub(st+#str+1,en-1):gsub('\\\\\"','\"'):gsub('\\\\n','\\n'):gsub('(\\\\u....)','')\r\n    end\r\n  end\r\n  if type(value)=='string' then\r\n    value=value:gsub(',}','}')    -- get rid of the previously inserted comma\r\n  end\r\n  return value,en\r\nend",
          "LuaScriptState": "",
          "XmlUI": "",
          "AttachedSnapPoints": [
            {
              "Position": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            }
          ]
        },
        "3": {
          "GUID": "df0c01",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -31.75,
            "posY": 1.0500015,
            "posZ": 19.25,
            "rotX": 2.63198012E-06,
            "rotY": 0.0111030545,
            "rotZ": -8.501877E-08,
            "scaleX": 0.692020833,
            "scaleY": 1.0,
            "scaleZ": 0.692020833
          },
          "Nickname": "Card Sleever",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": true,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/2054246290654640465/78D6B899E1E8296A522078F351770741592786B9/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "----#include <tts-tools/card-back-changer/Main>\r\ndo\r\nlocal url = \"\"\r\nlocal debounce = true \r\nfunction onInput(obj, color, input)\r\n    url = input\r\nend\r\n\r\nfunction updateCustomDeckField(data)\r\n    if not data.CustomDeck then\r\n        error(\"Object is not a custom card/deck\")\r\n    end\r\n\r\n    for _,entry in pairs(data.CustomDeck) do\r\n        entry.BackURL = url\r\n    end\r\nend\r\n\r\nfunction updateData(data)\r\n\r\n    if data.Name == \"Card\" or data.Name == \"CardCustom\" then\r\n    \r\n        updateCustomDeckField(data)\r\n    elseif data.Name == \"Deck\" then\r\n        updateCustomDeckField(data)\r\n\r\n        for _,cardData in pairs(data.ContainedObjects) do\r\n            updateCustomDeckField(cardData)\t\r\n        end\r\n    else\r\n        error(\"Invalid object of type \" .. tostring(data.Name))\r\n    end\r\n\r\nend\r\n\r\nfunction onCollisionEnter(info)\r\n\r\n\t\tif info and info.collision_object.type=='Deck' and debounce == true then\r\ndebounce = false \r\n\t\t\tif url == nil or url == \"\" then\r\n   \t\t\t    local nourl = self.getButtons()[2]\r\n   \t\t\t    local nourl2 = self.getButtons()[3]\r\n                nourl.scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]}\r\n                nourl2.scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]}\r\n\t\t\t    self.editButton(nourl)\r\n\t\t\t    self.editButton(nourl2)\r\n\r\n\t\t\telse\r\n\t\t\t\t\r\n            local data = info.collision_object.getData()\r\n\t\t\tlocal obj = info.collision_object\r\n\t\t\tlocal _pos = self.getPosition()\r\n\t\t\t\tobj.setPosition({_pos.x, _pos.y, _pos.z+7.0})\r\n\t\t\t\tupdateData(data)\r\n\r\n\t\t\t\tspawnObjectData({\r\n\t\t\t\t\tdata = data,\r\n\t\t\t\t\tposition = {_pos.x, _pos.y, _pos.z+4.0},\r\n\t\t\t\t\trotation = self.getRotation() + Vector(180, 0, 0),\r\n\r\n\t\t\t\t})\r\n\r\n\t\t\tend\r\n\r\n\t\tend\r\nend\r\n\r\nfunction onCollisionExit(info)\r\n\t\tif info and info.collision_object.type=='Deck' then\r\n   \t\t\tlocal nourl = self.getButtons()[2]\r\n   \t\t\tlocal nourl2 = self.getButtons()[3]\r\n            nourl.scale={0,0,0}\r\n            nourl2.scale={0,0,0}\r\n\t\t\tself.editButton(nourl)\r\n\t\t\tself.editButton(nourl2)\r\n\r\n\t\t\tself.setGMNotes('')\r\ndebounce = true\r\n\t\tend\r\nend\r\n\r\nfunction doNothing()\r\n  -- print(\"do nothing\")\r\nend\r\n\r\nfunction onLoad(save_state)\r\n\r\n    sScale=self.getScale()\r\n    url = save_state\r\n    self.createInput({\r\n        function_owner = self,\r\n        input_function = \"onInput\",\r\n        label = \"Card Back Image URL\",\r\n\t\talignment = 3,\r\n        value = url or \"\",\r\n        position={0,-0.02,-2.7},\r\n\t\tscale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n        color={0.1,0.1,0.1,0.9},\r\n        font_color={1,1,1},\r\n        width=2800,\r\n        height=340,\r\n        font_size=305,\r\n    })\t\r\n    self.createButton({\r\n\t    click_function='doNothing',\r\n        function_owner=self,\r\n        label='',\r\n        position={0,-0.02,-2.7},\r\n        scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n        color={0.1,0.1,0.1,0.9},\r\n        font_color={1,1,1},\r\n        width=3000,\r\n        height=750,\r\n        font_size=500,\r\n        tooltip='',\r\n    })\r\n\t\r\n  nourl={ click_function='doNothing',\r\n          function_owner=self,\r\n          label='No url set',\r\n          position={0,1.2,0},\r\n          scale={0,0,0},\r\n          color={0.1,0.1,0.1},\r\n          font_color={1,0,0},\r\n          width=0,\r\n          height=0,\r\n          font_size=500,\r\n          tooltip='' }\r\n  self.createButton(nourl)\r\n\r\n  nourl2={ click_function='doNothing',\r\n          function_owner=self,\r\n          label='',\r\n          position={0,1.2,0},\r\n          scale={0,0,0},\r\n          color={0.1,0.1,0.1,0.9},\r\n          font_color={1,0,0},\r\n          width=3000,\r\n          height=750,\r\n          font_size=500,\r\n          tooltip='' }\r\n  self.createButton(nourl2)\r\nend\r\n\r\nfunction onSave()\r\n    return url or \"\"\r\nend\r\n\r\nend\r\n----#include <tts-tools/card-back-changer/Main>\r\n",
          "LuaScriptState": "",
          "XmlUI": "",
          "AttachedSnapPoints": [
            {
              "Position": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            }
          ]
        },
        "4": {
          "GUID": "64ab73",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -31.75,
            "posY": 1.0500015,
            "posZ": 19.25,
            "rotX": 2.63198058E-06,
            "rotY": 0.0111030545,
            "rotZ": -8.501877E-08,
            "scaleX": 0.692020833,
            "scaleY": 1.0,
            "scaleZ": 0.692020833
          },
          "Nickname": "Deck Lister",
          "Description": "[b]Instructions to re-import your deck:[/b]\n1. Place your deck here\n2. Press the button below\n3. Type [b]scryfall deck[/b] into chat and the deck will spawn at your mouse cursor",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": true,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/2054246290654616221/2F22BB26C867DF797DD247D22A4AAEC64E19B9B7/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "--By Amuzet /adapted by π\r\nmod_name='Deck Lister'\r\nversion='π'\r\n\r\nfunction onLoad()\n self.interactable = true\r\n  local txt = '[b]Instructions to re-import your deck:[/b]\\n'..\r\n               '1. Place your deck here\\n'..\r\n               '2. Press the button below\\n'..\r\n               '3. Type [b]scryfall deck[/b] into chat and the deck will spawn at your mouse cursor'\r\n\r\n  self.setDescription(txt)\r\n  self.setName(mod_name)\r\n\r\n  sScale=self.getScale()\r\n\r\n  bpars={ click_function='click',\r\n          function_owner=self,\r\n          label='LIST',\r\n          position={0,-0.02,-2.7},\r\n          scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n          color={0.1,0.1,0.1},\r\n          font_color={1,1,1},\r\n          width=0,\r\n          height=0,\r\n          font_size=500,\r\n          tooltip='' }\r\n  self.createButton(bpars)\r\n\r\n  bpars={ click_function='click',\r\n          function_owner=self,\r\n          label='',\r\n          position={0,-0.02,-2.7},\r\n          scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n          color={0.1,0.1,0.1,0.9},\r\n          font_color={1,1,1},\r\n          width=3000,\r\n          height=750,\r\n          font_size=500,\r\n          tooltip='' }\r\n  self.createButton(bpars)\r\n\r\nend\r\n\r\nfunction lister(obj,pColor)\r\n  local pc = pColor\r\n\r\n  if obj and obj.type=='Deck' then\r\n\r\n    local list = ''\r\n    for _,v in pairs(obj.getObjects())do\r\n      local name = v.nickname:gsub('[\\n].*','')\r\n      list = list..'1 '..name..'\\n'\r\n    end\r\n\r\n    -- remove any existing tabs corresponding to player color\r\n    local proceed=false\r\n    local tabs = getNotebookTabs()\r\n    for i,tab in pairs(tabs) do\r\n      if tab.color==pColor then\r\n        removeNotebookTab(tab.index)\r\n      end\r\n      if i==#tabs then\r\n        proceed=true\r\n      end\r\n    end\r\n\r\n    -- once all existing player notebook tabs are removed, create a new one, containing the deck list\r\n    -- (this way both Amuzet's and Omes importers direct to this notebook tab)\r\n    Wait.condition(function()\r\n      Wait.time(function()\r\n        addNotebookTab({title=pColor , body=list , color=pColor})\r\n        Player[pc].broadcast('Deck list in Notebook Tab: '..pColor..'\\n'..\r\n                             'Type [b][i]scryfall deck[/i][/b] into chat to re-import deck')\r\n      end,0.2)\r\n    end,function() return proceed end)\r\n\r\n  end\r\nend\r\n\r\nfunction click(o,pc,a)\r\n  if getObjectFromGUID(self.getGMNotes())~=nil then\r\n    lister(getObjectFromGUID(self.getGMNotes()),pc)\r\n  end\r\nend\r\n\r\nfunction onCollisionEnter(info)\r\n  if info and info.collision_object.type=='Deck' then\r\n    local g = info.collision_object.getGUID()\r\n    self.setGMNotes(g)\r\n    self.editButton({\r\n      index=0,\r\n      label='Get Card List'\r\n    })\r\n  end\r\nend\r\n\r\nfunction onCollisionExit(info)\r\n  if info and info.collision_object.type=='Deck' then\r\n    self.setGMNotes('')\r\n    self.editButton({\r\n      index=0,\r\n      label='Place Deck'\r\n    })\r\n  end\r\nend",
          "LuaScriptState": "",
          "XmlUI": "",
          "AttachedSnapPoints": [
            {
              "Position": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            }
          ]
        },
        "5": {
          "GUID": "97d45d",
          "Name": "Custom_Token",
          "Transform": {
            "posX": -31.75,
            "posY": 1.0500015,
            "posZ": 19.25,
            "rotX": 2.631981E-06,
            "rotY": 0.0111030545,
            "rotZ": -8.501877E-08,
            "scaleX": 0.692020833,
            "scaleY": 1.0,
            "scaleZ": 0.692020833
          },
          "Nickname": "Card Sorter",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": true,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/2054246290654610595/ABD26CE0F3E53A65D110D8EFA64DF073E8C46A36/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"Scryfall Card Sorter.3d9252.lua\",\"version\":\"1.6.0\"}\r\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\r\n\tlocal loadingPlaceholder = {[{}] = true}\r\n\r\n\tlocal register\r\n\tlocal modules = {}\r\n\r\n\tlocal require\r\n\tlocal loaded = {}\r\n\r\n\tregister = function(name, body)\r\n\t\tif not modules[name] then\r\n\t\t\tmodules[name] = body\r\n\t\tend\r\n\tend\r\n\r\n\trequire = function(name)\r\n\t\tlocal loadedModule = loaded[name]\r\n\r\n\t\tif loadedModule then\r\n\t\t\tif loadedModule == loadingPlaceholder then\r\n\t\t\t\treturn nil\r\n\t\t\tend\r\n\t\telse\r\n\t\t\tif not modules[name] then\r\n\t\t\t\tif not superRequire then\r\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\r\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\r\n\t\t\t\telse\r\n\t\t\t\t\treturn superRequire(name)\r\n\t\t\t\tend\r\n\t\t\tend\r\n\r\n\t\t\tloaded[name] = loadingPlaceholder\r\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\r\n\t\t\tloaded[name] = loadedModule\r\n\t\tend\r\n\r\n\t\treturn loadedModule\r\n\tend\r\n\r\n\treturn require, loaded, register, modules\r\nend)(nil)\r\n__bundle_register(\"Scryfall Card Sorter.3d9252.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\nrequire(\"vscode/console\")\r\n\r\n-------------\r\n-- Globals --\r\n-------------\r\n\r\n-- Get collection at snapping point\r\npointO = {0,0,0}\r\npointA = {-3.5,0,0}\r\npointB = {-7,0,0}\r\npointC = {-10.5,0,0}\r\npointD = {-14,0,0}\r\n\r\nfunction onLoad()\r\n    self.setSnapPoints({\r\n        {rotation_snap = true, position = pointO},\r\n        {rotation_snap = true, position = pointA},\r\n        {rotation_snap = true, position = pointB},\r\n        {rotation_snap = true, position = pointC},\r\n        {rotation_snap = true, position = pointD}\r\n    })\r\nend\r\n\r\n\r\n-----------\r\n-- Utils --\r\n-----------\r\n\r\n-- Stole this from Stack overflow\r\nfunction string:split(sep)\r\n    if sep == nil then return {self} end\r\n    local result = {}\r\n    local regex = (\"([^%s]+)\"):format(sep)\r\n    for each in self:gmatch(regex) do\r\n       table.insert(result, each)\r\n    end\r\n    return result\r\nend\r\n  \r\n----------\r\n-- Init --\r\n----------\r\n\r\nfunction sort()\r\n    sortDeck(false)\r\nend\r\n\r\nfunction categorize()\r\n    sortDeck(true)\r\nend\r\n\r\n------------------\r\n-- The Business --\r\n------------------\r\n\r\nfunction sortDeck(categorize)\r\n    local pointO_ = self.getPosition()\r\n    local _pos = self.getPosition()\r\n    local pointA_ = {_pos.x, _pos.y, _pos.z+4.5}\r\n    local holdPointA_ = {_pos.x, _pos.y+3, _pos.z+4.5}\r\n    local pointA_ = {_pos.x, _pos.y, _pos.z+4.5}\r\n    local holdPoint = {_pos.x, _pos.y+3, _pos.z+4.5}\r\n    local pointA_ = {_pos.x, _pos.y, _pos.z+4.5}\r\n    local holdPoint = {_pos.x, _pos.y+3, _pos.z+4.5}\r\n\r\n    -- Get a deck if it exists\r\n    local deck = getContainer(self.getPosition())\r\n\r\n    if deck == nil or (deck.type ~= \"Deck\" and deck.type ~= \"Card\") then return end\r\n\r\n    local cards = {}\r\n    if deck.type == \"Deck\" then\r\n        for _,c in ipairs(deck.getObjects()) do\r\n            card = getCard(c)\r\n            table.insert(cards, card)\r\n        end\r\n    end\r\n    \r\n    if deck.type == \"Card\" then\r\n        moveToOutput(pointO_, {deck}, pointA_, holdPointA_)\r\n        return\r\n    end\r\n\r\n    if categorize then\r\n        -- put the cards into groups\r\n        local groups = {}\r\n        groups['Creature'] = {}\r\n        groups['Instant'] = {}\r\n        groups['Sorcery'] = {}\r\n        groups['Enchantment'] = {}\r\n        groups['Artifact'] = {}\r\n        groups['Basic Land'] = {}\r\n        groups['Land'] = {}\r\n        groups['Planeswalker'] = {}\r\n        groupless = {}\r\n        for _,c in ipairs(cards) do\r\n            local no_group = true\r\n            for k,_ in pairs(groups) do\r\n                if c.type:match(k) then\r\n                    table.insert(groups[k], c)\r\n                    no_group = false\r\n                    break\r\n                end\r\n            end\r\n            if no_group then\r\n                table.insert(groupless, c)\r\n            end\r\n        end\r\n        groups['Groupless'] = groupless\r\n        \r\n        local z_offset = 2.5\r\n        for k,v in pairs(groups) do\r\n            if #v ~= 0 then\r\n                local c = v\r\n                sortBy_name(c)\r\n                moveToOutput(pointO_, c, {_pos.x-10.3+z_offset, _pos.y, _pos.z+4.5}, {_pos.x-10.3+z_offset, _pos.y+3, _pos.z+4.5}, #v)\r\n                z_offset = z_offset + 2.25\r\n            end\r\n        end\r\n        return\r\n    end\r\n        \r\n    -- Sort the cards\r\n    sortBy_name(cards)\r\n    \r\n    -- Place the sorted cards in a deck\r\n    moveToOutput(pointO_, cards, pointA_, holdPointA_, #cards)\r\nend\r\n    \r\nfunction moveToOutput(sourcePoint, cards, destPoint, holdPoint, limit, index)\r\n    if limit == 0 then return end\r\n    -- Get containers at points\r\n    local source = getContainer(sourcePoint)\r\n    local dest = getContainer(destPoint)\r\n\r\n    if source == nil then return end\r\n\r\n    -- check if source is a single card\r\n    if source.type == \"Card\" then\r\n        source.setPosition(holdPoint)\r\n        return\r\n    end\r\n\r\n    timeDelay = 0.05\r\n\r\n    if source.type == \"Deck\" then\r\n        if index == nil then index = 1 end\r\n        if dest == nil then\r\n            source.takeObject({\r\n                position = holdPoint,\r\n                callback_function = function(card)\r\n                    card.setPosition(destPoint)\r\n                    Wait.time(function() \r\n                        moveToOutput(sourcePoint, cards, destPoint, holdPoint, limit-1, index+1)\r\n                    end, timeDelay)\r\n                end,\r\n                smooth = false,\r\n                guid = cards[index].guid,\r\n            })\r\n            return\r\n        end\r\n        source.takeObject({\r\n            position = holdPoint,\r\n            callback_function = function(card)\r\n                dest.putObject(card)\r\n                Wait.time(function()\r\n                    moveToOutput(sourcePoint, cards, destPoint, holdPoint, limit-1, index+1)\r\n                end, timeDelay)\r\n            end,\r\n            smooth = false,\r\n            guid = cards[index].guid,\r\n        })\r\n    end\r\nend\r\n\r\nfunction getContainer(pos)\r\n    -- TODO: Account for rotation\r\n    local hits = Physics.cast({\r\n        origin = pos,\r\n        direction = {0,1,0},\r\n        size = {1,1,1},\r\n        type = 2,\r\n        max_distance = 0.1\r\n    })\r\n    for _,o in ipairs(hits) do\r\n        if o.hit_object.type == \"Deck\" or o.hit_object.type == \"Card\" then\r\n            return o.hit_object\r\n        end\r\n    end\r\n\r\n    return nil\r\nend\r\n\r\nfunction sortBy_name(deck)\r\n    table.sort(deck, function(_str, _val)\r\n        if (_str == nil and _val == nil) then return true end\r\n        if (_str == nil and _val ~= nil) then return false end\r\n        if (_str ~= nil and _val == nil) then return true end\r\n\r\n        str = _str.name:lower()\r\n        val = _val.name:lower()\r\n        limit = math.min(#str, #val)\r\n\r\n        for i=1, limit do\r\n            if str:sub(i,i) > val:sub(i,i) then\r\n                return false\r\n            end\r\n\r\n            if str:sub(i,i) < val:sub(i,i) then\r\n                return true\r\n            end\r\n        end\r\n        \r\n        return false\r\n    end)\r\nend\r\n\r\nfunction sortBy_nickname(deck)\r\n    table.sort(deck, function(_str, _val)\r\n        if (_str == nil and _val == nil) then return true end\r\n        if (_str == nil and _val ~= nil) then return false end\r\n        if (_str ~= nil and _val == nil) then return true end\r\n\r\n        str = _str.Nickname\r\n        val = _val.Nickname\r\n        limit = math.min(#str, #val)\r\n\r\n        for i=1, limit do\r\n            if str:sub(i,i) > val:sub(i,i) then\r\n                return false\r\n            end\r\n\r\n            if str:sub(i,i) < val:sub(i,i) then\r\n                return true\r\n            end\r\n        end\r\n        \r\n        return false\r\n    end)\r\nend\r\n\r\nfunction getCard(c)\r\n    local card = {}\r\n\r\n    card.guid = c.guid\r\n    \r\n    local parts = c.name:split('\\n')\r\n    card.name = parts[1]\r\n    card.type = ''\r\n    if #parts == 2 then\r\n        card.type = parts[2]--:gsub('%s.*', '') \r\n    end\r\n\r\n    return card\r\nend\r\n\r\n    sScale=self.getScale()\r\n\r\n-- Buttons\r\nself.createButton({\r\n    click_function = 'sort',\r\n    function_owner = self,\r\n    label = 'Sort',\r\n    position={0,-0.02,-2.7},\r\n    scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n    color={0.1,0.1,0.1},\r\n    font_color={1,1,1},\r\n    width=0,\r\n    height=0,\r\n    font_size = 500\r\n})\r\nself.createButton({\r\n    click_function = 'sort',\r\n    function_owner = self,\r\n    label = '',\r\n    position={0,-0.02,-2.7},\r\n    scale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n    color={0.1,0.1,0.1,0.9},\r\n    font_color={1,1,1},\r\n    width = 3000,\r\n    height = 750,\r\n    font_size = 500\r\n})\r\n\r\nself.createButton({\r\n    click_function = 'categorize',\r\n    function_owner = self,\r\n    label = 'Categorize',\r\n    position={0,-0.02,-3.5},\r\n\tscale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n    color={0.1,0.1,0.1},\r\n    font_color={1,1,1},\r\n    width=0,\r\n    height=0,\r\n    font_size = 500\r\n})\r\nself.createButton({\r\n    click_function = 'categorize',\r\n    function_owner = self,\r\n    label = '',\r\n    position={0,-0.02,-3.5},\r\n\tscale={0.3/sScale[1],0.4/sScale[2],0.3/sScale[3]},\r\n    color={0.1,0.1,0.1,0.9},\r\n    font_color={1,1,1},\r\n    width = 3000,\r\n    height = 750,\r\n    font_size = 500\r\n})\r\n\r\nend)\r\n__bundle_register(\"vscode/console\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\nrequire(\"Console/console++\")\r\n\r\n-- function prototype\r\nfunction onExternalCommand(command) end\r\n\r\n-- Overwrite onChat function if you rather be handled by onExternalMessage\r\n-- function onChat(message, player) end\r\n\r\nfunction onExternalMessage(data)\r\n  if data.input ~= nil then onExternalCommand(data.input) end\r\n  if data.command ~= nil then\r\n    local hostPlayer\r\n    local players = getSeatedPlayers()\r\n    for key, value in pairs(players) do\r\n      if Player[value].host then\r\n        hostPlayer = Player[value]\r\n      end\r\n    end\r\n    if data.command ~= '' then\r\n      local command = ''\r\n      local command_function = nil\r\n      local parameters = {hostPlayer}\r\n      local requires_admin = false\r\n      local command_mode = console.in_command_mode[hostPlayer.steam_id]\r\n      if command_mode and console.active then\r\n          command, command_function, parameters, requires_admin = console.get_command(data.command, hostPlayer)\r\n      elseif data.command:sub(1, 1) == console.command_char and console.active then\r\n          if data.command:len() > 1 then\r\n              command, command_function, parameters, requires_admin = console.get_command(data.command:sub(2), hostPlayer)\r\n          else\r\n              command, command_function, parameters, requires_admin = console.get_command(console.command_char, hostPlayer)\r\n          end\r\n      else\r\n          for i, f in ipairs(console.validation_functions) do\r\n              local valid, response = f(data.command)\r\n              if response == nil then response = '' end\r\n              if not valid then\r\n                  printToColor(response, hostPlayer.color, console.invalid_color)\r\n                  return false\r\n              end\r\n          end\r\n          return true\r\n      end\r\n      if console.active then\r\n          if command_function and (hostPlayer.admin or not requires_admin) then\r\n              if command_mode then\r\n                  data.command = console.command_char .. console.command_char .. data.command\r\n              end\r\n              local response, mute = command_function(unpack(parameters))\r\n              if response ~= nil or mute ~= nil then\r\n                  if not mute then\r\n                      printToColor('\\n'..data.command, hostPlayer.color, console.command_color)\r\n                  end\r\n                  if response then\r\n                      printToColor(response, hostPlayer.color, console.output_color)\r\n                  end\r\n              end\r\n              if console.in_command_mode[hostPlayer.steam_id] then console.display_prompt(hostPlayer) end\r\n              return false\r\n          else\r\n              printToColor('\\n'..data.command, hostPlayer.color, console.command_color)\r\n              printToColor(console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\", hostPlayer.color, console.output_color)\r\n              return false\r\n          end\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nend)\r\n__bundle_register(\"Console/console++\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\nrequire(\"Console/console\")\r\n\r\nif not console.plusplus then\r\n    console.plusplus = true\r\n\r\n    -- Change these values as you wish\r\n    console.seperator         = '/'\r\n    console.wildcard          = '*'\r\n    console.literal           = '`'  -- string parameters will be treated as paths where apt unless prefixed with this\r\n    console.result            = '~'  -- refers to the most recently returned result from a call\r\n    console.command_seperator = ';'  -- used in batch files to seperate commands\r\n    console.indent            = '  '\r\n    console.crop_string_at = 20\r\n    console.builtin_path = 'sys'\r\n    console.table_bb    = '[EEDD88]'\r\n    console.hidden_bb   = '[DDAAAA]'\r\n    console.function_bb = '[AADDAA]'\r\n    console.value_bb    = '[88EE88]'\r\n    console.boolean_bb  = '[CCCCFF]'\r\n    console.object_bb   = '[CCBBCC]'\r\n    console.guid_bb     = '[BBBBBB]'\r\n\r\n    console.autoexec         = ''\r\n    console.autoexec_options = '-s'\r\n\r\n    -- Exposed methods:\r\n\r\n    function console.hide_globals(label)\r\n        -- all globals present when you call this will be hidden under <label> (unless built-in or already hidden)\r\n        local hidden = {}\r\n        for global, _ in pairs(_G) do\r\n            local found = false\r\n            for _, globals in pairs(console.hidden_globals) do\r\n                if globals[global] then\r\n                    found = true\r\n                    break\r\n                end\r\n            end\r\n            if not found then\r\n                table.insert(hidden, global)\r\n            end\r\n        end\r\n        if console.hidden_globals[label] == nil then\r\n            console.hidden_globals[label] = {}\r\n        end\r\n        for _, global in ipairs(hidden) do\r\n            console.hidden_globals[label][global] = true\r\n        end\r\n    end\r\n\r\n    function console.load()\r\n        -- call this function in an onLoad event to enable the autoexec\r\n        console.cd = console.seperator\r\n        for _, player in pairs(getSeatedPlayers()) do\r\n            if Player[player].admin then\r\n                console.commands['exec'].command_function(Player[player], console.seperator..'console'..console.seperator..'autoexec', console.autoexec_options)\r\n                break\r\n            end\r\n        end\r\n    end\r\n\r\n    function console.update()\r\n        -- call this function in an onUpdate event to enable the watch list\r\n        if console.watch_list and not console.watch_list_paused then\r\n            for variable, watch in pairs(console.watch_list) do\r\n                if watch.throttle == 0 or watch.last_check + watch.throttle < os.clock() then\r\n                    watch.last_check = os.clock()\r\n                    local node, id, parent, found\r\n                    if watch.is_guid then\r\n                        node = getObjectFromGUID(variable)\r\n                        found = tostring(node) ~= 'null'\r\n                    else\r\n                        node, id, parent, found = console.node_from_path(variable)\r\n                    end\r\n                    if node ~= nil and found then\r\n                        if type(node) == 'userdata' then\r\n                            if tostring(node) ~= 'null' then\r\n                                local p = function (x) return math.floor(x * 100) * 0.01 end\r\n                                local r = function (x) return math.floor(x + 0.5) end\r\n                                local position = node.getPosition()\r\n                                local rotation = node.getRotation()\r\n                                if p(position.x) ~= p(watch.position.x) or r(rotation.x) ~= r(watch.rotation.x) or\r\n                                   p(position.y) ~= p(watch.position.y) or r(rotation.y) ~= r(watch.rotation.y) or\r\n                                   p(position.z) ~= p(watch.position.z) or r(rotation.z) ~= r(watch.rotation.z) then\r\n                                   watch.position = position\r\n                                   watch.rotation = rotation\r\n                                   node = ' ∡ '..r(rotation.x)..' '..r(rotation.y)..' '..r(rotation.z) ..\r\n                                        console.boolean_bb..'   ⊞  '..p(position.x)..'   '..p(position.y)..'   '..p(position.z)\r\n                                   if watch.is_guid then\r\n                                       variable = console.format_guid(variable)\r\n                                   else\r\n                                       variable = console.object_bb .. variable .. '[-]'\r\n                                   end\r\n                                   printToColor(variable .. console.value_bb .. node .. '[-]', watch.player, console.output_color)\r\n                                end\r\n                            end\r\n                        elseif type(node) == 'function' then\r\n                            local result = node(unpack(watch.parameters))\r\n                            if watch.property and (type(result) == 'table' or type(result) == 'userdata') then\r\n                                result = result[watch.property]\r\n                                if type(result) == 'function' then\r\n                                    result = result()\r\n                                end\r\n                            end\r\n                            if result ~= watch.value then\r\n                                watch.value = result\r\n                                result = tostring(result)\r\n                                if result:len() > console.crop_string_at then result = result:sub(1, console.crop_string_at) .. '...' end\r\n                                if result:len() == 6 and watch.label:lower():find('guid') then result = console.format_guid(result) end\r\n                                printToColor(watch.label .. console.value_bb .. result .. '[-]', watch.player, console.output_color)\r\n                            end\r\n                        else\r\n                            if node ~= watch.value then\r\n                                watch.value = node\r\n                                if type(node) == 'boolean' then\r\n                                    if node then\r\n                                        node = 'true'\r\n                                    else\r\n                                        node = 'false'\r\n                                    end\r\n                                elseif type(node) == 'string' then\r\n                                    if node:len() > console.crop_string_at then node = node:sub(1, console.crop_string_at):gsub('\\n', ' ') .. '...' end\r\n                                end\r\n                                printToColor(variable .. ': ' .. console.value_bb .. node .. '[-]', watch.player, console.output_color)\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    -- simple swear-blocking validation\r\n    console.add_validation_function(\r\n        function (message)\r\n            local message = message:lower()\r\n            for i, bad_word in pairs({'fuck', 'cunt'}) do\r\n                if message:find(bad_word) then\r\n                    return false, \"No swearing!\"\r\n                end\r\n            end\r\n            return true\r\n        end\r\n    )\r\n\r\n    -- End of exposed methods.  You shouldn't need to interact with anything below (under normal circumstances)\r\n\r\n\r\n    -- override default prompt with one which displays current table\r\n    function console.display_prompt(player)\r\n        printToColor(console.cd .. ' ' .. console.command_char..console.command_char, player.color, console.prompt_color)\r\n    end\r\n\r\n\r\n    -- console++ follows\r\n\r\n    console.cd = console.seperator\r\n    console.hidden_globals = {}\r\n    console.hide_globals(console.builtin_path)\r\n\r\n    function console.is_hidden(label)\r\n        for _, globals in pairs(console.hidden_globals) do\r\n            if globals[label] then\r\n                return true\r\n            end\r\n        end\r\n        return false\r\n    end\r\n\r\n    function console.escape_bb(s)\r\n        local s = tostring(s)\r\n        if s == '' then\r\n            return ''\r\n        else\r\n            local r = ''\r\n            for c = 1, s:len() do\r\n                local char = s:sub(c, c)\r\n                if char == '[' then\r\n                    r = r .. '[\\u{200B}'\r\n                elseif char == ']' then\r\n                    r = r .. '\\u{200B}]'\r\n                else\r\n                    r = r .. char\r\n                end\r\n            end\r\n            return r\r\n        end\r\n    end\r\n\r\n    function console.format_guid(guid)\r\n        return console.guid_bb .. '⁅' .. guid .. '⁆[-]'\r\n    end\r\n\r\n    function console.fill_path(path)\r\n        local path = path\r\n        local filter = nil\r\n        if path == nil then\r\n            return console.cd, filter\r\n        end\r\n        local c = path:len()\r\n        if path:sub(c) ~= console.seperator then\r\n            local found = false\r\n            while c > 0 do\r\n                local char = path:sub(c, c)\r\n                if char == console.wildcard then\r\n                    found = true\r\n                elseif char == console.seperator then\r\n                    break\r\n                end\r\n                c = c - 1\r\n            end\r\n            if found then\r\n                filter = '^'\r\n                for i = c + 1, path:len() do\r\n                    local char = path:sub(i, i)\r\n                    if char == console.wildcard then\r\n                        filter = filter .. '.*'\r\n                    else\r\n                        filter = filter .. char\r\n                    end\r\n                end\r\n                filter = filter .. '$'\r\n                path = path:sub(1, c)\r\n            end\r\n        end\r\n        if path:sub(1,1) == console.seperator then\r\n            return path, filter\r\n        else\r\n            return console.cd .. path, filter\r\n        end\r\n    end\r\n\r\n    function console.node_from_path(path)\r\n        local node = _G\r\n        local id = {''}\r\n        local parent = {nil}\r\n        local found = true\r\n        local depth = 0\r\n        local stack = {}\r\n        local hidden = nil\r\n        local ends_with_table = {true}\r\n        if path == 'true' then\r\n            node = true\r\n        elseif path == 'false' then\r\n            node = false\r\n        elseif path ~= console.seperator then\r\n            for i, part in ipairs(console.split(path, console.seperator)) do\r\n                if part == '..' then\r\n                    if depth > 0 then\r\n                        node = table.remove(parent)\r\n                        table.remove(id)\r\n                        table.remove(stack)\r\n                        table.remove(ends_with_table)\r\n                        depth = depth - 1\r\n                    end\r\n                elseif part == '.' then\r\n                    ; -- do nothing, . = where we are\r\n                elseif part == console.result then\r\n                    table.insert(parent, node)\r\n                    table.insert(id, part)\r\n                    table.insert(stack, part)\r\n                    node = console.returned_value\r\n                    table.insert(ends_with_table, type(node) == 'table')\r\n                    depth = depth + 1\r\n                elseif node[part] ~= nil then\r\n                    table.insert(parent, node)\r\n                    table.insert(id, part)\r\n                    table.insert(stack, part)\r\n                    node = node[part]\r\n                    table.insert(ends_with_table, type(node) == 'table')\r\n                    depth = depth + 1\r\n                elseif node == _G and console.hidden_globals[part] then\r\n                    hidden = console.hidden_globals[part]\r\n                else\r\n                    table.insert(id, part)\r\n                    found = false\r\n                    break\r\n                end\r\n            end\r\n        end\r\n        path = ''\r\n        for i, part in ipairs(stack) do\r\n            path = path .. console.seperator .. part\r\n        end\r\n        if table.remove(ends_with_table) then\r\n            path = path .. console.seperator\r\n        end\r\n        return node, table.remove(id), table.remove(parent), found, path, hidden\r\n    end\r\n\r\n\r\n    -- commands\r\n\r\n    console.add_admin_command('cd', '[<table>]',\r\n        'Display current table or change current table',\r\n        function (player, path)\r\n            if path == nil then\r\n                return console.cd\r\n            else\r\n                path = tostring(path)\r\n            end\r\n            local location = console.fill_path(path)\r\n            local node, id, parent, found, location = console.node_from_path(location)\r\n            local text = nil\r\n            if node ~= nil and found and type(node) == 'table' then\r\n                console.cd = location\r\n                if not console.in_command_mode[player.steam_id] then text = console.cd end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text, false\r\n        end\r\n    )\r\n    console.add_admin_command('cd..', '', 'Change current table to parent table.', 'cd', {'..'})\r\n\r\n    console.add_admin_command('ls', '[' .. console.option .. '?afotv] [' .. console.option .. 'r[#]] [<table>]',\r\n        'Display variables in current table or specified table',\r\n        function (player, ...)\r\n            local help_details = console.header_bb .. 'Options[-]\\n' ..\r\n                'Show:\\n '..console.option..'f functions\\n '..console.option..'o objects\\n '..\r\n                console.option..'v variables (defaults to on)\\n '..console.option..'t tables (defaults to on)\\n '..\r\n                console.option..'a all\\n\\n' ..console.option..'r[#] recurse [# layers if specified]'\r\n            local path = console.cd\r\n            local display_functions = false\r\n            local display_objects = false\r\n            local display_variables = false\r\n            local display_tables = false\r\n            local display_all = false\r\n            local recursions_left = 0\r\n            for i, arg in ipairs({...}) do\r\n                arg = tostring(arg)\r\n                if arg:len() > 1 and arg:sub(1,1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c,c)\r\n                        if option == 'f' then\r\n                            display_functions = not display_functions\r\n                        elseif option == 'o' then\r\n                            display_objects = not display_objects\r\n                        elseif option == 'v' then\r\n                            display_variables = not display_variables\r\n                        elseif option == 't' then\r\n                            display_tables = not display_tables\r\n                        elseif option == 'a' then\r\n                            display_all = not display_all\r\n                        elseif option == 'r' then\r\n                            local n = ''\r\n                            local j = c + 1\r\n                            while j <= arg:len() do\r\n                                local char = arg:sub(j, j)\r\n                                if char:match('%d') then\r\n                                    n = n .. char\r\n                                else\r\n                                    break\r\n                                end\r\n                                j = j + 1\r\n                            end\r\n                            c = j - 1\r\n                            if n == '' then\r\n                                recursions_left = 20\r\n                            else\r\n                                recursions_left = tonumber(n)\r\n                            end\r\n                        elseif option == '?' or option == 'h' then\r\n                            return help_details\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. console.option .. option .. \"' not recognized>[-]\\n\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                else\r\n                    path = arg\r\n                end\r\n            end\r\n            local default_variables = not (display_tables or display_objects or display_functions or display_variables)\r\n            if display_functions or display_objects or display_variables then\r\n                display_tables = not display_tables\r\n            end\r\n            if display_all then\r\n                display_functions = true\r\n                display_objects = true\r\n                display_variables = true\r\n                display_tables = true\r\n            elseif default_variables then\r\n                display_functions = false\r\n                display_objects = false\r\n                display_variables = true\r\n                display_tables = true\r\n            end\r\n            local location, filter = console.fill_path(path)\r\n            return console.ls(player, location, filter, display_functions, display_objects, display_variables, display_tables, recursions_left)\r\n        end\r\n    )\r\n    console.add_admin_command('dir', nil, nil, 'ls')\r\n    console.add_admin_command(console.result, '', \"Calls 'ls \"..console.option..\"a \"..console.result..\"'\", 'ls', {console.option..'a', console.result})\r\n\r\n    function console.ls(player, path, filter, display_functions, display_objects, display_variables, display_tables, recursions_left, indent)\r\n        local text = ''\r\n        local indent = indent or ''\r\n        local node, id, parent, found, location, hidden = console.node_from_path(path)\r\n        local paths = {}\r\n        if node ~= nil and (found or hidden) then\r\n            if type(node) == 'table' then\r\n                local tables = {}\r\n                local entries = {}\r\n                for k, v in pairs(node) do\r\n                    if (node ~= _G or (not hidden and not console.is_hidden(k)) or (hidden and hidden[k])) and (filter == nil or k:match(filter)) then\r\n                        if type(v) == 'table' then\r\n                            local t = console.table_bb .. k .. '[-]'\r\n                            table.insert(tables, t)\r\n                            paths[t] = path .. console.seperator .. k\r\n                        else\r\n                            if type(v) == 'function' then\r\n                                if display_functions then\r\n                                    table.insert(entries, console.function_bb .. k .. '[-]()')\r\n                                end\r\n                            elseif type(v) == 'userdata' then\r\n                                if display_objects then\r\n                                    local tag = tostring(v)\r\n                                    if tag:find('(LuaGameObjectScript)') and not tag:gsub('(LuaGameObjectScript)',''):find('Script ') then\r\n                                        tag = v.tag .. ' ' .. console.format_guid(v.getGUID())\r\n                                    end\r\n                                    if type(k) == 'number' and math.floor(k) == k then k = string.format('%04d', k) end\r\n                                    table.insert(entries, console.object_bb .. k .. '[-]: '  .. tag)\r\n                                end\r\n                            elseif display_variables then\r\n                                if type(v) == 'boolean' then\r\n                                    if v then\r\n                                        v = 'true'\r\n                                    else\r\n                                        v = 'false'\r\n                                    end\r\n                                    table.insert(entries, k .. ': ' .. console.boolean_bb .. v .. '[-]')\r\n                                else\r\n                                    local is_guid = false\r\n                                    if type(v) == 'string' then\r\n                                        if v:len()> console.crop_string_at then v = v:sub(1, console.crop_string_at):gsub('\\n', ' ') .. '...' end\r\n                                        if type(k) == 'string' and k:lower():find('guid') and v:len() == 6 then\r\n                                            is_guid = true\r\n                                        end\r\n                                    end\r\n                                    if is_guid then\r\n                                        table.insert(entries, k .. ': ' .. console.format_guid(v) .. '[-]')\r\n                                    else\r\n                                        table.insert(entries, k .. ': ' .. console.value_bb .. console.escape_bb(v) .. '[-]')\r\n                                    end\r\n                                end\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n                local cmp = function (a, b)\r\n                    if not a then\r\n                        return true\r\n                    elseif not b then\r\n                        return false\r\n                    else\r\n                        local la = a:len()\r\n                        local lb = b:len()\r\n                        local c = 1\r\n                        repeat\r\n                            if c > la and c <= lb then\r\n                                return true\r\n                            elseif c > lb and c <= la then\r\n                                return false\r\n                            elseif c > la then\r\n                                return false\r\n                            else\r\n                                local ba = a:sub(c, c):byte()\r\n                                local bb = b:sub(c, c):byte()\r\n                                if ba < bb then\r\n                                    return true\r\n                                elseif bb < ba then\r\n                                    return false\r\n                                end\r\n                            end\r\n                            c = c + 1\r\n                        until false\r\n                    end\r\n                end\r\n                table.sort(tables, cmp)\r\n                table.sort(entries, cmp)\r\n                local cr = ''\r\n                if display_tables then\r\n                    for i, t in ipairs(tables) do\r\n                        text = text .. cr .. indent .. t .. console.seperator\r\n                        if recursions_left ~= 0 then\r\n                            text = text .. '\\n' .. console.ls(player, paths[t], filter,\r\n                                display_functions, display_objects, display_variables, display_tables,\r\n                                recursions_left-1, indent..console.indent)\r\n                        end\r\n                        cr = '\\n'\r\n                    end\r\n                    if node == _G and not hidden then\r\n                        for label, _ in pairs(console.hidden_globals) do\r\n                            if (filter == nil or label:match(filter)) then -- and label ~= console.builtin_path\r\n                                text = text .. cr .. indent .. console.hidden_bb .. label .. console.seperator .. '[-]'\r\n                                cr = '\\n'\r\n                            end\r\n                        end\r\n                    end\r\n                end\r\n                for _, entry in ipairs(entries) do\r\n                    text = text .. cr .. indent .. entry\r\n                    cr = '\\n'\r\n                end\r\n            elseif type(node) == 'userdata' then\r\n                local tag = tostring(node)\r\n                if tag ~= 'null' and tag:find('(LuaGameObjectScript)') and not tag:gsub('(LuaGameObjectScript)',''):find('Script ') then\r\n                    tag = node.tag .. ' ' .. console.format_guid(node.getGUID())\r\n                end\r\n                text = indent .. console.object_bb .. id .. '[-]: ' .. tag\r\n            elseif type(node) == 'function' then\r\n                text = indent .. console.function_bb .. id .. '[-]()'\r\n            elseif type(node) == 'boolean' then\r\n                if node then\r\n                    text = indent .. id .. ': ' .. console.boolean_bb .. 'true[-]'\r\n                else\r\n                    text = indent .. id .. ': ' .. console.boolean_bb .. 'false[-]'\r\n                end\r\n            else\r\n                if type(id) == 'string' and id:lower():find('guid') and type(node) == 'string' and node:len() == 6 then\r\n                    text = indent .. id .. ': ' .. console.format_guid(node) .. '[-]'\r\n                else\r\n                    text = indent .. id .. ': ' .. console.value_bb .. console.escape_bb(node) .. '[-]'\r\n                end\r\n            end\r\n        else\r\n            text = indent .. console.error_bb .. '<not found>[-]'\r\n        end\r\n        return text\r\n    end\r\n\r\n    console.add_admin_command('call', '<function> [<parameter>...]',\r\n        'Call function with parameters and display result.',\r\n        function (player, ...)\r\n            local path = nil\r\n            local parameters = {}\r\n            for i, arg in ipairs({...}) do\r\n                if i == 1 then\r\n                    path = tostring(arg)\r\n                else\r\n                    if type(arg) == 'string' then\r\n                        if arg:len() > 2 and arg:sub(1,1) == console.literal then\r\n                            arg = arg:sub(2)\r\n                        else\r\n                            local node, id, parent, found = console.node_from_path(console.fill_path(arg))\r\n                            if node ~= nil and found then\r\n                                arg = node\r\n                            end\r\n                        end\r\n                    end\r\n                    table.insert(parameters, arg)\r\n                end\r\n            end\r\n            if path == nil then\r\n                return console.error_bb .. '<you must supply a function>[-]'\r\n            end\r\n            local location = console.fill_path(path)\r\n            local node, id, parent, found, location = console.node_from_path(location)\r\n            local text = nil\r\n            if node ~= nil and found and type(node) == 'function' then\r\n                console.returned_value = node(unpack(parameters))\r\n                text = tostring(console.returned_value)\r\n                if console.deferred_assignment then\r\n                    local da = console.deferred_assignment\r\n                    if da.command == 'set' then\r\n                        if da.parent[da.id] ~= nil then\r\n                            if da.force or type(console.returned_value) == type(da.parent[da.id]) then\r\n                                da.parent[da.id] = console.returned_value\r\n                                text = text .. '\\n' .. console.header_bb .. \"<set '\" .. da.id .. \"'>[-]\"\r\n                            else\r\n                                text = text .. '\\n' .. console.error_bb .. \"<cannot set '\" .. da.id .. \"': it is of type '\" .. type(da.parent[da.id]) .. \"'>[-]\"\r\n                            end\r\n                        else\r\n                            text = text .. '\\n' .. console.error_bb .. \"<cannot set '\" .. da.id .. \"': it does not exist>[-]\"\r\n                        end\r\n                    elseif da.command == 'add' then\r\n                        if da.parent[da.id] == nil then\r\n                            da.parent[da.id] = console.returned_value\r\n                            text = text .. '\\n' .. console.header_bb .. \"<added '\" .. da.id .. \"'>[-]\"\r\n                        else\r\n                            text = text .. '\\n' .. \"<cannot add '\" .. da.id .. \"': it already exists>[-]\"\r\n                        end\r\n                    end\r\n                    console.deferred_assignment = nil\r\n                end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text, false\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('set', '['..console.option..'f] <variable> [<value>]',\r\n        \"Set variable to value.  If no value specified then the next value returned from 'call' is used.\\n\" ..\r\n            console.option ..'f  force overwrite ignoring type',\r\n        function (player, ...)\r\n            local variable = nil\r\n            local value = nil\r\n            local force = false\r\n            for _, arg in ipairs({...}) do\r\n                if type(arg) == 'string' and arg:len() > 1 and arg:sub(1, 1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c, c)\r\n                        if option == \"f\" then\r\n                            force = not force\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. option .. \"' not recognized>[-]\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                elseif variable == nil then\r\n                    variable = tostring(arg)\r\n                else\r\n                    value = arg\r\n                end\r\n            end\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply a variable>[-]'\r\n            end\r\n            variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if node ~= nil and found then\r\n                if value == nil then\r\n                    console.deferred_assignment = {command = 'set', parent = parent, id = id, force = force}\r\n                    text = id .. ': ' .. console.header_bb .. \"<awaiting 'call'>[-]\"\r\n                else\r\n                    console.deferred_assignment = nil\r\n                    if type(value) == 'string' and value:len() > 0  then\r\n                        if value:sub(1, 1) == console.literal then\r\n                            value = value:sub(2)\r\n                        else\r\n                            local value_node, value_id, value_parent, value_found = console.node_from_path(value)\r\n                            if value_node ~= nil and value_found then\r\n                                value = value_node\r\n                            else\r\n                                return console.error_bb .. '<not found>[-]'\r\n                            end\r\n                        end\r\n                    end\r\n                    if type(node) == 'boolean' then\r\n                        if not value or tostring(value):lower() == 'false' then\r\n                            value = false\r\n                        else\r\n                            value = true\r\n                        end\r\n                    end\r\n                    if type(node) == type(value) or force then\r\n                        parent[id] = value\r\n                        text = id .. ': ' .. console.value_bb .. tostring(parent[id]) .. '[-]'\r\n                    else\r\n                        return console.error_bb .. \"<cannot set '\" .. id .. \"': it is of type '\" .. type(node) .. \"'>[-]\"\r\n                    end\r\n                end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('toggle', '<boolean>',\r\n        'Toggle specified boolean variable',\r\n        function (player, variable)\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply variable>'\r\n            else\r\n                variable = tostring(variable)\r\n            end\r\n            local variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if node ~= nil and found then\r\n                if type(node) == 'boolean' then\r\n                    if node then\r\n                        parent[id] = false\r\n                        text = id .. ': ' .. console.value_bb .. 'false[-]'\r\n                    else\r\n                        parent[id] = true\r\n                        text = id .. ': ' .. console.value_bb .. 'true[-]'\r\n                    end\r\n                else\r\n                    text = console.error_bb .. '<can only toggle a boolean>[-]'\r\n                end\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text\r\n        end\r\n    )\r\n    console.add_admin_command('tgl', nil, nil, 'toggle')\r\n\r\n    console.add_admin_command('rm', '<variable>',\r\n        'Remove specified variable',\r\n        function (player, variable)\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply variable>'\r\n            else\r\n                variable = tostring(variable)\r\n            end\r\n            local variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if node ~= nil and found then\r\n                parent[id] = nil\r\n                text = id .. \" removed!\"\r\n            else\r\n                text = console.error_bb .. '<not found>[-]'\r\n            end\r\n            return text\r\n        end\r\n    )\r\n    console.add_admin_command('del', nil, nil, 'rm')\r\n\r\n    console.add_admin_command('add', '<variable> [<value>]',\r\n        \"Create a variable set to value.   If no value specified then the next value returned from 'call' is used.\",\r\n        function (player, variable, value)\r\n            if variable == nil then\r\n                return console.error_bb .. '<you must supply variable>[-]'\r\n            else\r\n                variable = tostring(variable)\r\n            end\r\n            local variable = console.fill_path(variable)\r\n            local node, id, parent, found = console.node_from_path(variable)\r\n            local text = ''\r\n            if found then\r\n                return console.error_bb .. '<already exists>[-]'\r\n            elseif node == nil or id == '' then\r\n                return console.error_bb .. '<not found>[-]'\r\n            else\r\n                if value == nil then\r\n                    console.deferred_assignment = {command = 'add', parent = node, id = id}\r\n                    text = id .. ': ' .. console.header_bb .. \"<awaiting 'call'>[-]\"\r\n                else\r\n                    console.deferred_assignment = nil\r\n                    if type(value) == 'string' and value:len() > 0  then\r\n                        if value:sub(1, 1) == console.literal then\r\n                            value = value:sub(2)\r\n                        else\r\n                            local value_node, value_id, value_parent, value_found = console.node_from_path(value)\r\n                            if value_node ~= nil and value_found then\r\n                                value = value_node\r\n                            else\r\n                                return console.error_bb .. '<not found>[-]'\r\n                            end\r\n                        end\r\n                    end\r\n                    node[id] = value\r\n                    text = id .. ': ' .. console.value_bb .. tostring(value) .. '[-]'\r\n                end\r\n            end\r\n            return text\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('exec', '['..console.option..'?qsv] <commands>',\r\n        'Execute a series of commands held in a string: commands are seperated by a new line or '..console.command_seperator,\r\n        function (player, ...)\r\n            local help_details = console.option..'q    quiet: will not output anything except final output\\n' ..\r\n                                 console.option..'s    silent: will not output anything at all\\n'..\r\n                                 console.option..'v    verbose: will output commands as they execute\\n'\r\n            local commands = nil\r\n            local verbose = false\r\n            local quiet = false\r\n            local silent = false\r\n            for _, arg in ipairs({...}) do\r\n                if type(arg) == 'string' and arg:len() > 1 and arg:sub(1,1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c,c)\r\n                        if option == '?' then\r\n                            return help_details\r\n                        elseif option == 'q' then\r\n                            quiet = not quiet\r\n                        elseif option == 's' then\r\n                            silent = not silent\r\n                        elseif option == 'v' then\r\n                            verbose = not verbose\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. option .. \"' not recognized>\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                elseif commands == nil then\r\n                    commands = tostring(arg)\r\n                end\r\n            end\r\n            if silent then quiet = true end\r\n            if commands:len() > 1 and commands:sub(1, 1) == console.literal then\r\n                commands = commands:sub(2)\r\n            else\r\n                local variable = console.fill_path(commands)\r\n                local node, id, parent, found = console.node_from_path(variable)\r\n                if node ~= nil and found then\r\n                    commands = node\r\n                else\r\n                    return console.error_bb .. '<not found>[-]'\r\n                end\r\n            end\r\n            if commands:find('\\n') then\r\n                commands = console.split(commands, '\\n')\r\n            else\r\n                commands = console.split(commands, console.command_seperator)\r\n            end\r\n            local end_result = nil\r\n            for _, command_text in ipairs(commands) do\r\n                local command = ''\r\n                local command_function = nil\r\n                local parameters = {player}\r\n                local requires_admin = false\r\n                command, command_function, parameters, requires_admin = console.get_command(command_text, player)\r\n                if command ~= '' then\r\n                    if command_function and (player.admin or not requires_admin) then\r\n                        local response, mute = command_function(unpack(parameters))\r\n                        if response ~= nil or mute ~= nil then\r\n                            if not mute and verbose and not quiet then\r\n                                printToColor('\\n'..command_text, player.color, console.command_color)\r\n                            end\r\n                            if response then\r\n                                end_result = response\r\n                                if not quiet then\r\n                                    printToColor(response, player.color, console.output_color)\r\n                                end\r\n                            end\r\n                        end\r\n                    elseif not quiet then\r\n                        if verbose then printToColor('\\n'..command_text, player.color, console.command_color) end\r\n                        printToColor(console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\", player.color, console.output_color)\r\n                    end\r\n                end\r\n            end\r\n            if end_result and not silent then\r\n                printToColor(end_result, player.color, console.output_color)\r\n            end\r\n        end\r\n    )\r\n\r\n    console.add_admin_command('watch', '['..console.option..'?cgp] ['..console.option..'t#] ['..console.option..console.seperator..'<property>] [<variable>]',\r\n        'Watch a variable or object and display it whenever it changes.\\n' .. console.hidden_bb ..\r\n        'Requires you to add a '..console.function_bb..'console.update()[-] call to an ' ..\r\n        console.function_bb .. 'onUpdate[-] event in your code.[-]\\n',\r\n        function (player, ...)\r\n            local help_details = 'Call without a parameter to display watched items, or with a variable to add it to watch list.\\n' ..\r\n                                console.option..'c will clear variable if specified, or all.\\n' ..\r\n                                console.option..'g will let you specify an object by its GUID.\\n' ..\r\n                                console.option..'t# will throttle output to # seconds.\\n' ..\r\n                                console.option..console.seperator..'<property> will watch the property of the variable.\\n' ..\r\n                                console.option..'p will pause or unpause watching.\\n'\r\n            local path = nil\r\n            local clearing = false\r\n            local throttle = nil\r\n            local pause_changed = false\r\n            local by_guid = false\r\n            local parameters = {}\r\n            local labels = {}\r\n            local property = nil\r\n            for _, arg in ipairs({...}) do\r\n                if type(arg) == 'string' and arg:len() > 1 and arg:sub(1,1) == console.option then\r\n                    local c = 2\r\n                    while c <= arg:len() do\r\n                        local option = arg:sub(c,c)\r\n                        if option == '?' then\r\n                            return help_details\r\n                        elseif option == 'c' then\r\n                            clearing = not clearing\r\n                        elseif option == 'p' then\r\n                            pause_changed = not pause_changed\r\n                        elseif option == 'g' then\r\n                            by_guid = not by_guid\r\n                        elseif option == console.seperator then\r\n                            if arg:len() > c then\r\n                                property = arg:sub(c + 1)\r\n                                c = arg:len() + 1\r\n                            end\r\n                        elseif option == 't' then\r\n                            local n = ''\r\n                            local j = c + 1\r\n                            while j <= arg:len() do\r\n                                local char = arg:sub(j, j)\r\n                                if char:match('[0-9.]') then\r\n                                    n = n .. char\r\n                                else\r\n                                    break\r\n                                end\r\n                                j = j + 1\r\n                            end\r\n                            c = j - 1\r\n                            if n == '' then\r\n                                return console.error_bb .. '<you must provide a throttle duration (in seconds)>[-]'\r\n                            else\r\n                                throttle = tonumber(n)\r\n                            end\r\n                        else\r\n                            return console.error_bb .. \"<option '\" .. option .. \"' not recognized>\"\r\n                        end\r\n                        c = c + 1\r\n                    end\r\n                else\r\n                    if path == nil then\r\n                        path = tostring(arg)\r\n                    else\r\n                        local label = tostring(arg)\r\n                        if type(arg) == 'string' then\r\n                            if arg:len() > 2 and arg:sub(1,1) == console.literal then\r\n                                arg = arg:sub(2)\r\n                                label = arg\r\n                            else\r\n                                local node, id, parent, found = console.node_from_path(console.fill_path(arg))\r\n                                if node ~= nil and found then\r\n                                    arg = node\r\n                                end\r\n                            end\r\n                        end\r\n                        table.insert(labels, label)\r\n                        table.insert(parameters, arg)\r\n                    end\r\n                end\r\n            end\r\n            local text = ''\r\n            if pause_changed then\r\n                if console.watch_list_paused then\r\n                    console.watch_list_paused = nil\r\n                    text = text .. console.header_bb .. '<unpaused>[-]'\r\n                else\r\n                    console.watch_list_paused = true\r\n                    text = text .. console.header_bb .. '<paused>[-]'\r\n                end\r\n            end\r\n            if path == nil then\r\n                if throttle ~= nil then\r\n                    text = text .. '\\n' .. console.error_bb .. '<you must provide a variable or object>[-]'\r\n                elseif by_guid then\r\n                    text = text .. '\\n' .. console.error_bb .. '<you must provide a GUID>[-]'\r\n                elseif clearing then\r\n                    console.watch_list = nil\r\n                    console.watch_list_paused = nil\r\n                    text = text .. '\\nWatch list cleared!'\r\n                elseif not pause_changed then\r\n                    if console.watch_list then\r\n                        local watched = {}\r\n                        for label, watch in pairs(console.watch_list) do\r\n                            if watch.player == player.color then\r\n                                table.insert(watched, label)\r\n                            end\r\n                        end\r\n                        table.sort(watched)\r\n                        text = text .. '\\n'..console.header_bb..'Watching:[-]'\r\n                        for _, label in ipairs(watched) do\r\n                            local watch = console.watch_list[label]\r\n                            local is_guid = (label:len() == 6 and label:sub(1,1) ~= console.seperator)\r\n                            local node, id, parent, found\r\n                            local prefix\r\n                            text = text .. '\\n'\r\n                            if is_guid then\r\n                                prefix =  console.format_guid(label)\r\n                                node = getObjectFromGUID(label)\r\n                                found = tostring(node) ~= 'null'\r\n                            else\r\n                                prefix = label\r\n                                node, id, parent, found = console.node_from_path(label)\r\n                            end\r\n                            if node ~= nil and found then\r\n                                if type(node) == 'userdata' then\r\n                                    prefix = console.object_bb .. prefix .. '[-]'\r\n                                    local position = node.getPosition()\r\n                                    local rotation = node.getRotation()\r\n                                    local p = function (x) return math.floor(x * 100) * 0.01 end\r\n                                    local r = function (x) return math.floor(x + 0.5) end\r\n                                    text = text .. prefix .. console.value_bb .. ' ∡ '..r(rotation.x)..' '..r(rotation.y)..' '..r(rotation.z) .. '[-]'..\r\n                                            console.boolean_bb..'   ⊞  '..p(position.x)..'   '..p(position.y)..'   '..p(position.z)\r\n                                elseif type(node) == 'function' then\r\n                                    local result = node(unpack(console.watch_list[label].parameters))\r\n                                    if watch.property and (type(result) == 'table' or type(result) == 'userdata') then\r\n                                        result = result[watch.property]\r\n                                        if type(result) == 'function' then\r\n                                            result = result()\r\n                                        end\r\n                                    end\r\n                                    result = tostring(result)\r\n                                    if watch.propery and watch.property:lower():find('guid') then\r\n                                        result = console.format_guid(result)\r\n                                    end\r\n                                    if result:len() > console.crop_string_at then result = result:sub(1, console.crop_string_at) .. '...' end\r\n                                    text = text .. watch.label .. console.value_bb .. result .. '[-]'\r\n                                else\r\n                                    if type(node) == 'boolean' then\r\n                                        if node then\r\n                                            node = 'true'\r\n                                        else\r\n                                            node = 'false'\r\n                                        end\r\n                                    elseif type(node) == 'string' then\r\n                                        if node:len() > console.crop_string_at then node = node:sub(1, console.crop_string_at):gsub('\\n', ' ') .. '...' end\r\n                                    end\r\n                                    text = text .. prefix .. ': ' .. console.value_bb .. node .. '[-]'\r\n                                end\r\n                            end\r\n                        end\r\n                    else\r\n                        text = text .. \"\\nWatch list is empty.\"\r\n                    end\r\n                end\r\n            else\r\n                if not by_guid then\r\n                    path = console.fill_path(path)\r\n                end\r\n                if clearing then\r\n                    local node, id, parent, found\r\n                    if not by_guid then\r\n                        node, id, parent, found, path = console.node_from_path(path)\r\n                    end\r\n                    if console.watch_list[path] then\r\n                        console.watch_list[path] = nil\r\n                        if next(console.watch_list) == nil then\r\n                            console.watch_list = nil\r\n                        end\r\n                        text = text .. '\\n' .. console.header_bb.. 'No longer watching:[-] ' .. path\r\n                    else\r\n                        text = text .. '\\n' .. console.error_bb .. '<not found>[-]'\r\n                    end\r\n                else\r\n                    local node, id, parent, found\r\n                    if by_guid then\r\n                        node = getObjectFromGUID(path)\r\n                        found = tostring(node) ~= 'null'\r\n                    else\r\n                        node, id, parent, found, path = console.node_from_path(path)\r\n                    end\r\n                    if node ~= nil and found then\r\n                        if console.watch_list == nil then console.watch_list = {} end\r\n                        if throttle == nil then throttle = 0 end\r\n                        console.watch_list[path] = {player=player.color, throttle=throttle, last_check=0, property=property}\r\n                        if type(node) == 'userdata' then\r\n                            console.watch_list[path].position = node.getPosition()\r\n                            console.watch_list[path].rotation = node.getRotation()\r\n                            console.watch_list[path].is_guid  = by_guid\r\n                        elseif type(node) == 'function' then\r\n                            console.watch_list[path].parameters = parameters\r\n                            console.watch_list[path].value = node\r\n                            console.watch_list[path].label = console.function_bb .. path .. '[-]'\r\n                            if property then\r\n                                console.watch_list[path].label = console.watch_list[path].label .. console.seperator .. property\r\n                            end\r\n                            for _, label in ipairs(labels) do\r\n                                console.watch_list[path].label = console.watch_list[path].label .. ' ' .. console.hidden_bb .. label .. '[-]'\r\n                            end\r\n                            console.watch_list[path].label = console.watch_list[path].label .. ': '\r\n                        else\r\n                            console.watch_list[path].value = node\r\n                        end\r\n                        if by_guid then\r\n                            path = console.format_guid(path)\r\n                        end\r\n                        text = text .. '\\n' .. console.header_bb .. 'Watching:[-] ' .. path\r\n                    else\r\n                        text = text .. '\\n' .. console.error_bb .. '<not found>[-]'\r\n                    end\r\n                end\r\n            end\r\n            if text:len() > 1 and text:sub(1, 1) == '\\n' then\r\n                text = text:sub(2)\r\n            end\r\n            return text\r\n        end\r\n    )\r\n\r\n    console.add_player_command('shout', '<text>',\r\n        'Broadcast <text> to all players. Colour a section with {RRGGBB}section{-}.',\r\n        function (player, ...)\r\n            local text = player.steam_name .. ': '\r\n            local space = ''\r\n            for _, word in ipairs({...}) do\r\n                text = text .. space .. tostring(word)\r\n                space = ' '\r\n            end\r\n            text = text:gsub('{','[')\r\n            text = text:gsub('}',']')\r\n            broadcastToAll(text, stringColorToRGB(player.color))\r\n            return nil, false\r\n        end\r\n    )\r\n\r\n    -- change the command help color so client added commands appear different to console++\r\n    console.set_command_listing_bb('[A0F0C0]')\r\nend\r\n\r\nend)\r\n__bundle_register(\"Console/console\", function(require, _LOADED, __bundle_register, __bundle_modules)\r\nif not console then\r\n    console = {}\r\n\r\n    -- Change these values as you wish\r\n    console.command_char = '>'\r\n    console.option       = '-'\r\n    console.prompt_color  = {r = 0.8,  g = 1.0,  b = 0.8 }\r\n    console.command_color = {r = 0.8,  g = 0.6,  b = 0.8 }\r\n    console.output_color  = {r = 0.88, g = 0.88, b = 0.88}\r\n    console.invalid_color = {r = 1.0,  g = 0.2,  b = 0.2 }\r\n    console.header_bb       = '[EECCAA]'\r\n    console.error_bb        = '[FF9999]'\r\n    console.inbuilt_help_bb = '[E0E0E0]'\r\n    console.client_help_bb  = '[C0C0FF]'\r\n\r\n    -- Exposed methods:\r\n\r\n    function console.add_validation_function(validation_function)\r\n        -- Adds a validation function all chat will be checked against:\r\n        -- function(string message) which returns (boolean valid, string response)\r\n        -- If all validation functions return <valid> as true the message will be displayed.\r\n        -- If one returns <valid> as false then its <response> will be displayed to that player instead.\r\n        table.insert(console.validation_functions, validation_function)\r\n    end\r\n\r\n    function console.add_player_command(command, parameter_text, help_text, command_function, default_parameters)\r\n        -- Adds a command anyone can use, see below for details\r\n        console.add_command(command, false, parameter_text, help_text, command_function, default_parameters)\r\n    end\r\n\r\n    function console.add_admin_command(command, parameter_text, help_text, command_function, default_parameters)\r\n        -- Adds a command only admins can use, see below for details\r\n        console.add_command(command, true, parameter_text, help_text, command_function, default_parameters)\r\n    end\r\n\r\n    function console.add_command(command, requires_admin, parameter_text, help_text, command_function, default_parameters)\r\n        -- Adds a command to the console.\r\n        -- command_function must take <player> as its first argument, and then any\r\n        --   subsequent arguments you wish which will be provided by the player.\r\n        -- You may alias an already-present command by calling this with command_function set to\r\n        --   the command string instead of a function.  default_parameters can be set for the alias.\r\n        -- See basic built-in commands at the bottom of this file for examples.\r\n        local commands = console.commands\r\n        local command_function = command_function\r\n        local help_text = help_text\r\n        local parameter_text = parameter_text\r\n        if type(command_function) == 'string' then --alias\r\n            if help_text == nil then\r\n                help_text = commands[command_function].help_text\r\n            end\r\n            if parameter_text == nil then\r\n                parameter_text = commands[command_function].parameter_text\r\n            end\r\n            command_function = commands[command_function].command_function\r\n        end\r\n        console.commands[command] = {\r\n            command_function   = command_function,\r\n            requires_admin     = requires_admin,\r\n            parameter_text     = parameter_text,\r\n            help_text          = help_text,\r\n            help_bb            = console.command_help_bb,\r\n            default_parameters = default_parameters,\r\n        }\r\n    end\r\n\r\n    function console.set_command_listing_bb(bb)\r\n        -- Tags commands added after with a bb color for when they are displayed (i.e. with 'help')\r\n        console.command_help_bb = bb\r\n    end\r\n\r\n    function console.disable()\r\n        -- Disables console for command purposes, but leaves validation functions running\r\n        console.active = false\r\n    end\r\n\r\n    function console.enable()\r\n        -- Enables console commands (console commands are on by default)\r\n        console.active = true\r\n    end\r\n\r\n    -- End of exposed methods.  You shouldn't need to interact with anything below (under normal circumstances)\r\n\r\n\r\n    console.active = true\r\n    console.in_command_mode = {}\r\n    console.commands = {}\r\n    console.validation_functions = {}\r\n    console.set_command_listing_bb(console.inbuilt_help_bb)\r\n\r\n    function onChat(message, player)\r\n        if message ~= '' then\r\n            local command = ''\r\n            local command_function = nil\r\n            local parameters = {player}\r\n            local requires_admin = false\r\n            local command_mode = console.in_command_mode[player.steam_id]\r\n            if command_mode and console.active then\r\n                command, command_function, parameters, requires_admin = console.get_command(message, player)\r\n            elseif message:sub(1, 1) == console.command_char and console.active then\r\n                if message:len() > 1 then\r\n                    command, command_function, parameters, requires_admin = console.get_command(message:sub(2), player)\r\n                else\r\n                    command, command_function, parameters, requires_admin = console.get_command(console.command_char, player)\r\n                end\r\n            else\r\n                for i, f in ipairs(console.validation_functions) do\r\n                    local valid, response = f(message)\r\n                    if response == nil then response = '' end\r\n                    if not valid then\r\n                        printToColor(response, player.color, console.invalid_color)\r\n                        return false\r\n                    end\r\n                end\r\n                return true\r\n            end\r\n            if console.active then\r\n                if command_function and (player.admin or not requires_admin) then\r\n                    if command_mode then\r\n                        message = console.command_char .. console.command_char .. message\r\n                    end\r\n                    local response, mute = command_function(unpack(parameters))\r\n                    if response ~= nil or mute ~= nil then\r\n                        if not mute then\r\n                            printToColor('\\n'..message, player.color, console.command_color)\r\n                        end\r\n                        if response then\r\n                            printToColor(response, player.color, console.output_color)\r\n                        end\r\n                    end\r\n                    if console.in_command_mode[player.steam_id] then console.display_prompt(player) end\r\n                    return false\r\n                else\r\n                    printToColor('\\n'..message, player.color, console.command_color)\r\n                    printToColor(console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\", player.color, console.output_color)\r\n                    return false\r\n                end\r\n            end\r\n        end\r\n    end\r\n\r\n    function console.get_command(message, player)\r\n        local command_name = ''\r\n        local command_function = nil\r\n        local requires_admin = false\r\n        local parameters = {player}\r\n        for i, part in ipairs(console.split(message)) do\r\n            if i == 1 then\r\n                command_name = part\r\n                local command = console.commands[command_name]\r\n                if command then\r\n                    command_function = command.command_function\r\n                    requires_admin = command.requires_admin\r\n                    if command.default_parameters then\r\n                        for _, parameter in ipairs(command.default_parameters) do\r\n                            table.insert(parameters, parameter)\r\n                        end\r\n                    end\r\n                end\r\n            else\r\n                table.insert(parameters, part)\r\n            end\r\n        end\r\n        return command_name, command_function, parameters, requires_admin\r\n    end\r\n\r\n    function console.display_prompt(player)\r\n        printToColor(console.command_char..console.command_char, player.color, console.prompt_color)\r\n    end\r\n\r\n    function console.split(text, split_on)\r\n        local split_on = split_on or ' '\r\n        if type(split_on) == 'string' then\r\n            local s = {}\r\n            for c = 1, split_on:len() do\r\n                s[split_on:sub(c,c)] = true\r\n            end\r\n            split_on = s\r\n        end\r\n        local parts = {}\r\n        if text ~= '' then\r\n            local make_table = function(s)\r\n                local entries = console.split(s, ' ,')\r\n                local t = {}\r\n                for _, entry in ipairs(entries) do\r\n                    if type(entry) == 'string' and entry:find('=') then\r\n                        e = console.split(entry, '=')\r\n                        t[e[1]] = e[2]\r\n                    else\r\n                        table.insert(t, entry)\r\n                    end\r\n                end\r\n                return t\r\n            end\r\n            local current_split_on = split_on\r\n            local adding = false\r\n            local part = \"\"\r\n            local totype = tonumber\r\n            for c = 1, text:len() do\r\n                local char = text:sub(c, c)\r\n                if adding then\r\n                    if current_split_on[char] then -- ended current part\r\n                        if totype(part) ~= nil then\r\n                            table.insert(parts, totype(part))\r\n                        else\r\n                            table.insert(parts, part)\r\n                        end\r\n                        adding = false\r\n                        current_split_on = split_on\r\n                        totype = tonumber\r\n                    else\r\n                        part = part .. char\r\n                    end\r\n                else\r\n                    if not current_split_on[char] then -- found start of part\r\n                        if char == \"'\" then\r\n                            current_split_on = {[\"'\"] = true}\r\n                            totype = tostring\r\n                            part = ''\r\n                        elseif char == '\"' then\r\n                            current_split_on = {['\"'] = true}\r\n                            totype = tostring\r\n                            part = ''\r\n                        elseif char == '{' then\r\n                            current_split_on = {['}'] = true}\r\n                            totype = make_table\r\n                            part = ''\r\n                        else\r\n                            part = char\r\n                        end\r\n                        adding = true\r\n                    end\r\n                end\r\n            end\r\n            if adding then\r\n                if totype(part) ~= nil then\r\n                    table.insert(parts, totype(part))\r\n                else\r\n                    table.insert(parts, part)\r\n                end\r\n            end\r\n        end\r\n        return parts\r\n    end\r\n\r\n\r\n    -- Add basic built-in console commands\r\n\r\n    console.add_player_command('help', '[' .. console.option .. 'all|<command>]',\r\n        'Display available commands or help on all commands or help on a specific command.',\r\n        function (player, command)\r\n            if command ~= nil then\r\n                command = tostring(command)\r\n            end\r\n            local make_help = function (command)\r\n                return console.header_bb .. command .. ' ' .. console.commands[command].parameter_text ..\r\n                        '[-]\\n' .. console.commands[command].help_text\r\n            end\r\n            local info_mode = false\r\n            if command == console.option..'all' then\r\n                info_mode = true\r\n            end\r\n            if command and console.commands[command] then\r\n                return make_help(command)\r\n            elseif command and not info_mode then\r\n                return console.error_bb .. \"<command '\" .. command .. \"' not found>[-]\"\r\n            else\r\n                local msg = console.header_bb .. 'Available commands:[-]'\r\n                local command_list = {}\r\n                for c, _ in pairs(console.commands) do\r\n                    if player.admin or not console.commands[c].requires_admin then\r\n                        if info_mode then\r\n                            table.insert(command_list, make_help(c))\r\n                        else\r\n                            table.insert(command_list, c)\r\n                        end\r\n                    end\r\n                end\r\n                table.sort(command_list)\r\n                local sep\r\n                if info_mode then\r\n                    sep = '\\n\\n'\r\n                else\r\n                    sep = '\\n'\r\n                end\r\n                for _, c in ipairs(command_list) do\r\n                    local cmd = console.commands[c]\r\n                    if cmd then\r\n                        msg = msg .. sep .. cmd.help_bb .. c .. '[-]'\r\n                    else\r\n                        msg = msg .. sep .. c\r\n                    end\r\n                    if not info_mode then sep = ', ' end\r\n                end\r\n                return msg\r\n            end\r\n        end\r\n    )\r\n    console.add_player_command('?', nil, nil, 'help')\r\n    console.add_player_command('info', '', 'Display help on all available commands.', 'help', {console.option..'all'})\r\n\r\n    console.add_player_command('exit', '',\r\n        \"Leave <command mode> ('\" .. console.command_char .. \"' does the same).\",\r\n        function (player)\r\n            console.in_command_mode[player.steam_id] = nil\r\n            return console.header_bb .. '<command mode: off>[-]'\r\n        end\r\n    )\r\n\r\n    console.add_player_command('cmd', '',\r\n        \"Enter <command mode> ('\" .. console.command_char .. \"' does the same).\",\r\n        function (player)\r\n            console.in_command_mode[player.steam_id] = true\r\n            return console.header_bb .. '<command mode: on>[-]'\r\n        end\r\n    )\r\n\r\n    console.add_player_command(console.command_char, '',\r\n        'Toggle <command mode>',\r\n        function (player)\r\n            console.in_command_mode[player.steam_id] = not console.in_command_mode[player.steam_id]\r\n            if console.in_command_mode[player.steam_id] then\r\n                return console.header_bb .. '<command mode: on>[-]', true\r\n            else\r\n                return console.header_bb .. '<command mode: off>[-]', true\r\n            end\r\n        end\r\n    )\r\n\r\n    console.add_player_command('=', '<expression>',\r\n        'Evaluate an expression',\r\n        function (player, ...)\r\n            local expression = ''\r\n            for _, arg in ipairs({...}) do\r\n                expression = expression .. ' ' .. tostring(arg)\r\n            end\r\n            if not player.admin then\r\n                expression = expression:gasub('[a-zA-Z~]', '')\r\n            end\r\n            console.returned_value = dynamic.eval(expression)\r\n            return console.returned_value\r\n        end\r\n    )\r\n\r\n    console.add_player_command('echo', '<text>',\r\n        'Display text on screen',\r\n        function (player, ...)\r\n            local text = ''\r\n            for _, arg in ipairs({...}) do\r\n                text = text .. ' ' .. tostring(arg)\r\n            end\r\n            printToColor(text, player.color, console.output_color)\r\n            return false\r\n        end\r\n    )\r\n\r\n    console.add_player_command('cls', '',\r\n        'Clear console text',\r\n        function (player)\r\n            return '\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n' ..\r\n                   '\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\r\n        end\r\n    )\r\n\r\n    console.add_player_command('alias', '<alias> <command> [<parameter>...]',\r\n        'Create a command alias.',\r\n        function (player, ...)\r\n            local alias\r\n            local command\r\n            local parameters = {}\r\n            for i, arg in ipairs({...}) do\r\n                if i == 1 then\r\n                    alias = tostring(arg)\r\n                elseif i == 2 then\r\n                    command = tostring(arg)\r\n                else\r\n                    table.insert(parameters, arg)\r\n                end\r\n            end\r\n            if not alias then\r\n                return console.error_bb .. '<must provide an alias>[-]'\r\n            --elseif console.commands[alias] ~= nil then\r\n            --    return console.error_bb .. \"<command '\" .. alias .. \"' already exists!>[-]\"\r\n            elseif command == nil then\r\n                return console.error_bb .. \"<must provide a command>[-]\"\r\n            elseif console.commands[command] == nil then\r\n                return console.error_bb .. \"<command '\" .. command .. \"' does not exist>[-]\"\r\n            else\r\n                local text = console.header_bb .. alias .. '[-] = ' .. command\r\n                local help_text = console.commands[command].help_text\r\n                if not help_text:find('\\nAliased to: ') then\r\n                    help_text = help_text .. '\\nAliased to: ' .. command\r\n                end\r\n                local combined_parameters = {}\r\n                if console.commands[command].default_parameters then\r\n                    for _, parameter in ipairs(console.commands[command].default_parameters) do\r\n                        table.insert(combined_parameters, parameter)\r\n                    end\r\n                end\r\n                for _, parameter in ipairs(parameters) do\r\n                    table.insert(combined_parameters, parameter)\r\n                    text = text .. ' ' .. parameter\r\n                    help_text = help_text .. ' ' .. parameter\r\n                end\r\n                console.add_command(alias, console.commands[command].requires_admin, console.commands[command].parameter_text, help_text, command, combined_parameters)\r\n                return text\r\n            end\r\n        end\r\n    )\r\n\r\n    -- change the command help color so client added commands appear different to in-built\r\n    console.set_command_listing_bb(console.client_help_bb)\r\nend\r\n\r\nend)\r\nreturn __bundle_require(\"Scryfall Card Sorter.3d9252.lua\")",
          "LuaScriptState": "",
          "XmlUI": "",
          "AttachedSnapPoints": [
            {
              "Position": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Position": {
                "x": -3.5,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Position": {
                "x": -7.0,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Position": {
                "x": -10.5,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            },
            {
              "Position": {
                "x": -14.0,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            }
          ]
        }
      },
      "ChildObjects": [
        {
          "GUID": "c279b0",
          "Name": "Custom_Token",
          "Transform": {
            "posX": 0.0,
            "posY": 0.0,
            "posZ": 0.0,
            "rotX": 1.94933215E-14,
            "rotY": 2.08274082E-06,
            "rotZ": 3.54297779E-22,
            "scaleX": 0.31622228,
            "scaleY": 10.00001,
            "scaleZ": 0.226423457
          },
          "Nickname": "Card Sleever",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": true,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "https://steamusercontent-a.akamaihd.net/ugc/2055372835340870486/794A2EB170269894B56F5E191C18AA58376E2546/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "AttachedSnapPoints": [
            {
              "Position": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              },
              "Rotation": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
              }
            }
          ]
        }
      ]
    }
  ]
}