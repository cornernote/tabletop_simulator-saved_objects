{
  "SaveName": "",
  "Date": "",
  "VersionNumber": "",
  "GameMode": "",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "",
  "Sky": "",
  "Note": "",
  "TabStates": {},
  "LuaScript": "",
  "LuaScriptState": "",
  "XmlUI": "",
  "ObjectStates": [
    {
      "GUID": "059a49",
      "Name": "Custom_Model_Infinite_Bag",
      "Transform": {
        "posX": -17.8671131,
        "posY": 2.183039,
        "posZ": -3.85433054,
        "rotX": -1.28887024E-07,
        "rotY": 89.76938,
        "rotZ": 1.48566572E-08,
        "scaleX": 3.09999824,
        "scaleY": 3.09999824,
        "scaleZ": 3.09999824
      },
      "Nickname": "[FFDA00]ANY[ffffff] MTG Booster Box",
      "Description": "SET: SPM",
      "GMNotes": "",
      "AltLookAngle": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "CustomMesh": {
        "MeshURL": "https://www.dropbox.com/s/jockzmj1e6yx0ub/tuckbox.obj?dl=1",
        "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12337440257369525692/FFAB46AA1DDF402F405DFF555D4124F785EBC27A/",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 3,
        "TypeIndex": 7,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Generate any (well, many) boosters.\r\n\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\n\r\nlocal config = {\r\n    backURL = 'https://steamusercontent-a.akamaihd.net/ugc/1647720103762682461/35EF6E87970E2A5D6581E7D96A99F8A575B7A15F/',\r\n    apiBaseURL = 'http://api.scryfall.com/cards/random?q='\r\n}\r\n\r\nlocal packLua = [[\r\n-- Any MTG Booster Generator by CoRNeRNoTe\r\n-- Most recent script can be found on GitHub:\r\n-- https://github.com/cornernote/tabletop_simulator-mtg_booster_generator/blob/main/lua/booster-generator.lua\r\nfunction tryObjectEnter()\r\n    return false\r\nend\r\nfunction onObjectLeaveContainer(container)\r\n    if container ~= self then\r\n        return\r\n    end\r\n    Wait.time(function()\r\n        Wait.condition(\r\n                function()\r\n                    if container ~= nil then\r\n                        container.destruct()\r\n                    end\r\n                end,\r\n                function()\r\n                    return container ~= nil and container.getQuantity() == 0\r\n                end\r\n        )\r\n    end, 1)\r\nend\r\n]]\r\n\r\nlocal packLabelLua = [[\r\nfunction onLoad()\r\n    self.createButton({\r\n        label = self.getName() or \"\",\r\n        click_function = 'null',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 150,\r\n        color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\nend\r\n]]\r\n\r\nlocal boosterCount = 0\r\nlocal boosterDataCache = {}\r\nlocal cardStackDescription = \"\"\r\nlocal lastDescription = \"\"\r\nlocal pollInterval = 0.11  -- seconds, limit scryfall API requests to <10/sec\r\nlocal timePassed = 0\r\nlocal requestQueue = {}\r\n\r\nlocal defaultImage = {\r\n    pack = \"https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/\",\r\n    box = \"https://steamusercontent-a.akamaihd.net/ugc/12337440257369525692/FFAB46AA1DDF402F405DFF555D4124F785EBC27A/\"\r\n}\r\n\r\nlocal setImages = {\r\n    mystery = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1871804141033719694/FE0CC0C11B5ADB27831BAAF0FF37E95852B6F454/\",\r\n        --box = \"https://steamusercontent-a.akamaihd.net/ugc/1869552972532565911/FA78A97BBAB75CF44A7ED444920317C9CE41EABF/\", -- wrong model\r\n        name = \"Mystery\",\r\n    },\r\n    fin = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/16627771293824374075/C5699273F56C725E5F909A4CF68E0BBB40CB3212/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/12758583996214265176/92BF2AA71307A15E627B82EF92FD4081DE9F8BEF/\",\r\n        name = \"Final Fantasy\",\r\n    },\r\n    inr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894966905/8D9807FCC410A72E23B650DD45417ADE665B4E87/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33314777894958369/39DEB8D4462F1BC1D52636F874AF87D4E0FA4F36/\",\r\n        name = \"Innistrad Remaster\",\r\n    },\r\n    dft = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545885589/0C728D0BDFAB373310773FA4546CC4E08B1B11A1/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33315411545850871/98EB110FF97B6A90033B81633E0293397406819A/\",\r\n        name = \"Aetherdrift\",\r\n    },\r\n    eoe = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/15223391781034002798/18D4F50FA52D5739A7AAF47270CD89A8F3161F20/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/12580228339626521582/AB004BC5138BE7C58B634A8183FE6972C0770796/\",\r\n        name = \"Edge of Eternities\",\r\n    },\r\n    tdm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968555543/9ADDB19799EBAE44174466FE19E0C52F73EDDAE4/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33320655968415112/A7D3C7023F76DD7D187C1DA65A3D30007C85C5A6/\",\r\n        name = \"\",\r\n    },\r\n    fdn = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666062860/0DFCD530284A8A4EC67CCEA18399BDE9405F3C3C/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666179694/00D1056E0709307541AD18383A3C4C02FD0E1DF9/\",\r\n        name = \"Foundations\",\r\n    },\r\n    dsk = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666215369/BFD6BBAC0DE7F1F5C810F4FFCA8EF5E50EC8A03E/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666213749/327EF64F9F6599C7338FBEFD6E30F67F94687F9A/\",\r\n        name = \"Duskmourn: House of Horror\",\r\n    },\r\n    blb = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666242938/FA118E357C5820C6BF4EC70CAECC88876B22DE41/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666280402/EFA53DA40538B9B516FC204E7C03B3BDC8350C38/\",\r\n        name = \"Bloomburrow\",\r\n    },\r\n    mh3 = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666331598/112B58990D8AD19B704448588F6CC34A8BF0E2E9/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666329942/59090620BF6D0D9EEC8609C9AEEE34F744E6158B/\",\r\n        name = \"Modern Horizons III\",\r\n    },\r\n    mkm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666403145/D578E8D070D0F89BB866212A8C5FD97AE840F418/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666405067/2B88816E482872EFD864CF2809FC777C690E6055/\",\r\n        name = \"Murders at Karlov Manor\",\r\n    },\r\n    otj = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666361741/B40E45A8AE490D38D02C8D32295E71920362D781/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666378756/1E2CFB189744E3C571E628562ACCB25E2A613E45/\",\r\n        name = \"Outlaws of Thunder Junction\",\r\n    },\r\n    rvr = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666416970/8B9F38A1D618C5C025C45E8D484B097CA8F245EE/\",\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/33313055666433696/DA887125A73154443749A719F198C05C16ACAEA1/\",\r\n        name = \"Ravnica Remastered\"\r\n    },\r\n    xml = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/861734852198387392/B81155A30E28760116D166987C221F946D37380E/\",\r\n        name = \"Ixalan\",\r\n    },\r\n    khm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450301159293/A7F7C010D0312D856CD8667678F5732BDB8F6EB2/\",\r\n        name = \"Kaldheim\",\r\n    },\r\n    mid = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441450308868762/12F6CE09A39E5FEC3B472EBE54562B92A7332027/\",\r\n        name = \"Innistrad: Midnight Hunt\",\r\n    },\r\n    stx = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1734441184603578733/2009A7D782D40F1456733EFE30ACC064D12B5FFD/\",\r\n        name = \"StrixHaven\",\r\n    },\r\n    afr = {\r\n        pack = \"Adventures in the Forgotten Realms\",\r\n        name = \"https://steamusercontent-a.akamaihd.net/ugc/1734441262522564318/D44434D1C56BA4A590591606A3A50EE4C9F607B8/\",\r\n    },\r\n    ust = {\r\n        pack = {\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384090159/B009BD275EAA4E4D327CABF6E9C287FCF974CAE0/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553886384088312/840D789FDE909D82F2943ADC26138DD838C6D3CD/\",\r\n            \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271665770/97276A7B7774EF057E915B9A0AB9AC3F81221ED2/\",\r\n        },\r\n        name = \"Unstable\",\r\n    },\r\n    ugl = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271718076/9F874EFF82054749352677189F63683DC038A17E/\",\r\n        name = \"Unglued\",\r\n    },\r\n    unh = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/1869553610271611558/564F7D6B23A479883C84C4F5D90852CD4C056E9A/\",\r\n        name = \"Unhinged\",\r\n    },\r\n    vow = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089146067515/FB7A98B9B0BE5C25098F63981C6C12BBE1036BA6/\",\r\n        name = \"Inistrad Crimson VOW\",\r\n    },\r\n    uma = {\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031710788/D480DA25A894F28774F9CFE05BAF98338A647B38/\",\r\n        pack = \"https://i.imgur.com/4RylXgU.png\",\r\n        name = \"Ultimate Masters\",\r\n    },\r\n    cmm = {\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031758324/9454C7F259FF420BF408C79C67D2135CB7208342/\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031059945/BF91A05DA4A788ED5F5C01B05305F3E4ECE8CE52/\",\r\n        name = \"Commander Masters\",\r\n    },\r\n    mma = {\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098031581496/8F6B8B0676DA8ECD9E6077F1A396DD7697C383FB/\",\r\n        pack = \"https://i.imgur.com/CU7EL6h.png\",\r\n        name = \"Modern Masters\",\r\n    },\r\n    twoxm = {\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151520026/5E0945FCDF5A168C9F21D93E5D63677C8447B967/\",\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/2027238089151521799/52EC298FBB89EA2A24DA024981161F96E3522645/\",\r\n        name = \"Double Masters\",\r\n        code = \"2XM\"\r\n    },\r\n    sok = {\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098032381929/1C04D7E1CFD05BA6D03747877A1450B490EBD6BB/\",\r\n        pack = \"https://i.imgur.com/ctFTHkw.jpg\",\r\n        name = \"Saviors of Kamigawa\",\r\n    },\r\n    neo = {\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098032099644/CA4A90672BD93147D4E17B42956A1B166C009628/\",\r\n        pack = \"https://i.imgur.com/5FcGpqC.png\",\r\n        name = \"Kamigawa: Neon Dynasty\",\r\n    },\r\n    bok = {\r\n        box = \"https://steamusercontent-a.akamaihd.net/ugc/2093668098032413138/3FF67A090FBD356E16AE2C041EE52C9D4D1B325B/\",\r\n        pack = \"https://i.imgur.com/t6UP7lt.jpg\",\r\n        name = \"Betrayers of Kamigawa\",\r\n    },\r\n    chk = {\r\n        pack = \"https://i.imgur.com/E7IW8Tv.jpg\",\r\n        name = \"Champions of Kamigawa\",\r\n    },\r\n    spm = {\r\n        pack = \"https://steamusercontent-a.akamaihd.net/ugc/11967831829609287872/6D168435BEFB1C1EE50A4F0B286BF4D8D9FEA7C8/\",\r\n        name = \"Marvel's Spider-Man\",\r\n    },\r\n}\r\n\r\nlocal setCodeMapping = {\r\n    ['2xm'] = 'twoxm',\r\n    ['---'] = 'empty',\r\n}\r\n\r\nfunction onObjectLeaveContainer(container, leave_object)\r\n    if container ~= self then\r\n        return\r\n    end\r\n\r\n    local setCode = getSetCode()\r\n\r\n    leave_object.setName(setCode .. \" Booster\")\r\n    boosterCount = boosterCount + 1\r\n    local currentBoosterID = boosterCount\r\n\r\n    local queryTable = getScryfallQueryTable()\r\n    fetchDeckData(queryTable, currentBoosterID)\r\n\r\n    leave_object.createButton({\r\n        label = \"generating \" .. setCode,\r\n        click_function = 'null',\r\n        function_owner = self,\r\n        position = { 0, 0.2, -1.6 },\r\n        rotation = { 0, 0, 0 },\r\n        width = 1000,\r\n        height = 200,\r\n        font_size = 130,\r\n        color = { 0, 0, 0, 95 },\r\n        font_color = { 1, 1, 1, 95 },\r\n    })\r\n\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local diffuseImage = defaultImage.pack\r\n    local packImage = setImages[mappedSetCode] and setImages[mappedSetCode].pack\r\n\r\n    if packImage then\r\n        if type(packImage) == \"string\" then\r\n            diffuseImage = packImage\r\n        elseif type(packImage) == \"table\" then\r\n            diffuseImage = packImage[math.random(1, #packImage)]\r\n        else\r\n            packImage = null\r\n        end\r\n    end\r\n\r\n    leave_object.setCustomObject({\r\n        diffuse = diffuseImage\r\n    })\r\n\r\n    Wait.condition(\r\n            function()\r\n                Wait.condition(\r\n                        function()\r\n                            local objectData = leave_object.getData()\r\n                            objectData.ContainedObjects = boosterDataCache[currentBoosterID]\r\n                            leave_object.destruct()\r\n                            local generatedBooster = spawnObjectData({ data = objectData })\r\n                            local packLuaScript = packLua\r\n                            if not packImage then\r\n                                packLuaScript = packLuaScript .. packLabelLua\r\n                            end\r\n                            generatedBooster.setLuaScript(packLuaScript)\r\n                        end,\r\n                        function()\r\n                            return leave_object.resting\r\n                        end\r\n                )\r\n            end,\r\n            function()\r\n                return boosterDataCache[currentBoosterID] ~= nil\r\n            end\r\n    )\r\nend\r\n\r\nfunction drawBox()\r\n    self.clearButtons()\r\n\r\n    local setCode = getSetCode()\r\n    local mappedSetCode = setCodeMapping[string.lower(setCode)] or string.lower(setCode)\r\n    local diffuseImage = defaultImage.box\r\n\r\n    if setImages[mappedSetCode] and setImages[mappedSetCode].box then\r\n        diffuseImage = setImages[mappedSetCode].box\r\n    end\r\n\r\n    if self.getCustomObject().diffuse ~= diffuseImage then\r\n        self.setCustomObject({\r\n            diffuse = diffuseImage\r\n        })\r\n        self.reload()\r\n    end\r\n\r\n    if not setImages[mappedSetCode] or not setImages[mappedSetCode].box then\r\n        self.createButton({\r\n            click_function = \"null\",\r\n            function_owner = self,\r\n            label = setCode .. \" Boosters\",\r\n            position = { -0.71, -0.07, 0.15 },\r\n            rotation = { 0, 90, 270 },\r\n            color = { 0.1, 0.1, 0.1, 1 },\r\n            font_color = { 0.8, 0.8, 0.8, 0.8 },\r\n            scale = { 0.7, 0.7, 0.7 },\r\n            width = 0,\r\n            height = 0,\r\n            font_size = 220,\r\n        })\r\n\r\n        self.createButton({\r\n            click_function = \"null\",\r\n            function_owner = self,\r\n            label = setCode,\r\n            position = { 0, 0.33, 0.2 },\r\n            rotation = { 0, 90, 0 },\r\n            color = { 0.1, 0.1, 0.1, 1 },\r\n            font_color = { 0.8, 0.8, 0.8, 0.8 },\r\n            scale = { 0.7, 0.7, 0.7 },\r\n            width = 0,\r\n            height = 0,\r\n            font_size = 500,\r\n        })\r\n\r\n        if #setCode > 3 then\r\n            self.editButton({ index = 0, font_size = 160 })\r\n            self.editButton({ index = 1, font_size = 250 })\r\n        end\r\n    end\r\nend\r\n\r\nfunction onLoad()\r\n    drawBox()\r\n    lastDescription = self.getDescription()\r\nend\r\n\r\nfunction onUpdate()\r\n    timePassed = timePassed + Time.delta_time\r\n    if timePassed >= pollInterval then\r\n        timePassed = 0\r\n        checkDescription()\r\n        processRequestQueue()\r\n    end\r\nend\r\n\r\nfunction checkDescription()\r\n    local description = self.getDescription()\r\n\r\n    if description ~= lastDescription then\r\n        lastDescription = description\r\n        drawBox()\r\n    end\r\nend\r\n\r\nfunction getSetCode()\r\n    -- Trim leading/trailing whitespace from the captured text\r\n    -- This makes sure \" SET: M15 \" becomes \"M15\"\r\n    local setCode = self.getDescription():match(\"^SET:%s*(%S+)\") or \"---\"\r\n\r\n    if #setCode > 3 then\r\n        setCode = string.lower(setCode):gsub(\"^%l\", string.upper)\r\n    else\r\n        setCode = string.upper(setCode)\r\n    end\r\n\r\n    return setCode\r\nend\r\n\r\nlocal BoosterPacks = {}\r\nlocal apiSetPrefix = config.apiBaseURL .. 'is:booster+s:'\r\n\r\nlocal function getRandomRarity(mythicChance, rareChance, uncommonChance)\r\n    if math.random(1, mythicChance or 36) == 1 then\r\n        return 'r:mythic'\r\n    elseif math.random(1, rareChance or 8) == 1 then\r\n        return 'r:rare'\r\n    elseif math.random(1, uncommonChance or 4) == 1 then\r\n        return 'r:uncommon'\r\n    else\r\n        return 'r:common'\r\n    end\r\nend\r\n\r\nlocal function addCardTypeToPack(pack, cardType)\r\n    local randomIndex = math.random(#pack - 1, #pack)\r\n    for i = 13, #pack do\r\n        if randomIndex == i then\r\n            pack[i] = pack[i] .. '+' .. cardType\r\n        else\r\n            pack[i] = pack[i] .. '+-(' .. cardType .. ')'\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal MasterpieceSets = {\r\n    bfz = 'exp', ogw = 'exp', kld = 'mps', aer = 'mps',\r\n    akh = 'mp2', hou = 'mp2', stx = 'sta',\r\n    tsp = 'tsb', mb1 = 'fmb1', mh2 = 'h1r'\r\n}\r\n\r\nfunction BoosterPacks.default(set)\r\n    local pack = {}\r\n    local url = apiSetPrefix .. set .. '+'\r\n    url = url:gsub('%+s:%(', '+(')\r\n\r\n    for c in ('wubrg'):gmatch('.') do\r\n        table.insert(pack, url .. 'r:common+c>=' .. c)\r\n    end\r\n    for i = 1, 6 do\r\n        table.insert(pack, url .. 'r:common+-t:basic')\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(pack, url .. 'r:uncommon')\r\n    end\r\n\r\n    table.insert(pack, url .. getRandomRarity(8, 1))\r\n\r\n    if MasterpieceSets[set] and math.random(1, 144) == 1 then\r\n        pack[#pack] = config.apiBaseURL .. 's:' .. MasterpieceSets[set]\r\n    end\r\n\r\n    return pack\r\nend\r\n\r\nfunction BoosterPacks.dom(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:legendary')\r\nend\r\nfunction BoosterPacks.war(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:planeswalker')\r\nend\r\nfunction BoosterPacks.znr(set)\r\n    return addCardTypeToPack(BoosterPacks.default(set), 't:land+(is:spell+or+pathway)')\r\nend\r\n\r\n-- Changed function name to be a valid Lua identifier for clarity.\r\nfunction BoosterPacks.twoxm(set)\r\n    local pack = BoosterPacks.default(set)\r\n    pack[11] = pack[#pack]\r\n    for i = 9, 10 do\r\n        pack[i] = apiSetPrefix .. '2xm' .. '+' .. getRandomRarity()\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal function createReplacementSlotPack(pack, set, removeQuery, addQuery)\r\n    for i, v in pairs(pack) do\r\n        if i ~= 6 then\r\n            pack[i] = v .. removeQuery\r\n        else\r\n            pack[i] = apiSetPrefix .. set .. '+' .. getRandomRarity() .. addQuery\r\n        end\r\n    end\r\n    return pack\r\nend\r\n\r\nfor _, s in ipairs({ 'isd', 'dka', 'soi', 'emn' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-is:transform', '+is:transform')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'mid' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local pack = BoosterPacks.default(set)\r\n        local transformIndex = math.random(#pack - 1, #pack)\r\n        for i, v in pairs(pack) do\r\n            if i == 6 or i == transformIndex then\r\n                pack[i] = v .. '+is:transform'\r\n            else\r\n                pack[i] = v .. '+-is:transform'\r\n            end\r\n        end\r\n        return pack\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'cns', 'cn2' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-wm:conspiracy', '+wm:conspiracy')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'rav', 'gpt', 'dis', 'rtr', 'gtc', 'dgm', 'grn', 'rna' }) do\r\n    BoosterPacks[s] = function(set)\r\n        return createReplacementSlotPack(BoosterPacks.default(set), set, '+-t:land', '+t:land+-t:basic')\r\n    end\r\nend\r\n\r\nfor _, s in ipairs({ 'ice', 'all', 'csp', 'mh1', 'khm' }) do\r\n    BoosterPacks[s] = function(set)\r\n        local pack = BoosterPacks.default(set)\r\n        pack[6] = apiSetPrefix .. set .. '+t:basic+t:snow'\r\n        return pack\r\n    end\r\nend\r\n\r\nBoosterPacks.empty = function()\r\n    return {}\r\nend\r\n\r\nBoosterPacks.mystery = function()\r\n    local urlTable = {}\r\n    local urlPrefix = config.apiBaseURL .. 'set:mb1+'\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(urlTable, urlPrefix .. 'r<rare+c=' .. c)\r\n        table.insert(urlTable, urlPrefix .. 'r<rare+c=' .. c)\r\n    end\r\n    table.insert(urlTable, urlPrefix .. 'c:m+r<rare')\r\n    table.insert(urlTable, urlPrefix .. 'c:c+r<rare')\r\n    table.insert(urlTable, urlPrefix .. 'r>=rare+frame:2015')\r\n    table.insert(urlTable, urlPrefix .. 'r>=rare+-frame:2015')\r\n    table.insert(urlTable, config.apiBaseURL .. 'set:cmb1')\r\n    return urlTable\r\nend\r\n\r\nBoosterPacks.spm = function()\r\n    local urlTable = {}\r\n    local urlPrefix = config.apiBaseURL .. 's:spm+'\r\n\r\n    for i = 1, math.random(6, 9) do\r\n        table.insert(urlTable, urlPrefix .. 'r:common')\r\n    end\r\n    for i = 1, math.random(3, 5) do\r\n        table.insert(urlTable, urlPrefix .. 'r:uncommon')\r\n    end\r\n    table.insert(urlTable, urlPrefix .. 't:land')\r\n\r\n    local numRares = 1\r\n    local rareRoll = math.random(1, 200)\r\n    if rareRoll == 1 then\r\n        numRares = 4\r\n    elseif rareRoll <= 7 then\r\n        numRares = 3\r\n    elseif rareRoll <= 70 then\r\n        numRares = 2\r\n    end\r\n    for i = 1, numRares do\r\n        table.insert(urlTable, urlPrefix .. getRandomRarity(8, 1))\r\n    end\r\n\r\n    table.insert(urlTable, urlPrefix .. getRandomRarity(nil, nil, 4))\r\n    return urlTable\r\nend\r\n\r\nBoosterPacks.stx = function()\r\n    local pack = {}\r\n    local url = apiSetPrefix .. 'stx+'\r\n    local archiveURL = config.apiBaseURL .. 'set:sta+r>common+'\r\n    table.insert(pack, archiveURL .. (math.random(2) == 1 and 'lang:en' or 'lang:ja'))\r\n    table.insert(pack, url .. 't:lesson+-r:u')\r\n    table.insert(pack, url .. getRandomRarity(8, 1))\r\n    for i = 1, 3 do\r\n        table.insert(pack, url .. 'r:u')\r\n    end\r\n    for _, c in ipairs({ 'w', 'u', 'b', 'r', 'g' }) do\r\n        table.insert(pack, url .. 'r:c+c:' .. c)\r\n    end\r\n    for i = 1, 3 do\r\n        table.insert(pack, url .. 'r:c+-t:basic')\r\n    end\r\n\r\n    if math.random(3) == 1 then\r\n        table.insert(pack, url)\r\n    else\r\n        table.insert(pack, url .. 'r:c+-t:basic')\r\n    end\r\n    return pack\r\nend\r\n\r\nlocal function createCustomBooster(setQuery, packStructure)\r\n    return function()\r\n        local pack = BoosterPacks.default(setQuery)\r\n        return packStructure(pack)\r\n    end\r\nend\r\n\r\nBoosterPacks.standard = createCustomBooster('f:standard', function(pack)\r\n    local url = config.apiBaseURL .. 'f:standard+'\r\n    local artSets = '(set:tafr+or+set:tstx+or+set:tkhm+or+set:tznr+or+set:sznr+or+set:tm21+or+set:tiko+or+set:tthb+or+set:teld)'\r\n    local artQuery = '(border:borderless+or+frame:showcase+or+frame:extendedart+or+set:plist+or+set:sta)'\r\n    table.insert(pack, url .. 't:basic')\r\n    table.insert(pack, config.apiBaseURL .. artSets)\r\n    if math.random(2) == 1 then\r\n        pack[#pack - 1] = url .. artQuery\r\n    end\r\n    if math.random(2) == 1 then\r\n        pack[#pack] = url .. artQuery\r\n    end\r\n    return pack\r\nend)\r\n\r\nBoosterPacks.conspiracy = createCustomBooster('(s:cns+or+s:cn2)', function(pack)\r\n    table.insert(pack, pack[#pack]:gsub('r:%S+', getRandomRarity(9, 6, 3)))\r\n    pack[6] = pack[math.random(11, 12)]\r\n    for i, _ in pairs(pack) do\r\n        local query = (i == 6 or i == #pack) and '+wm:conspiracy' or '+-wm:conspiracy'\r\n        pack[i] = pack[i] .. query\r\n    end\r\n    return pack\r\nend)\r\n\r\nBoosterPacks.innistrad = createCustomBooster('(s:isd+or+s:dka+or+s:avr+or+s:soi+or+s:emn+or+s:mid)', function(pack)\r\n    table.insert(pack, pack[#pack]:gsub('r:%S+', getRandomRarity(8, 1)))\r\n    pack[11] = pack[12]\r\n    for i, _ in pairs(pack) do\r\n        local query = (i == 6 or i == #pack or i == #pack - 2) and '+is:transform' or '+-is:transform'\r\n        pack[i] = pack[i] .. query\r\n    end\r\n    return pack\r\nend)\r\n\r\nBoosterPacks.ravnica = createCustomBooster('(s:rav+or+s:gpt+or+s:dis+or+s:rtr+or+s:gtc+or+s:dgm+or+s:grn+or+s:rna)', function(pack)\r\n    local landQuery = 't:land+-t:basic'\r\n    table.insert(pack, pack[#pack])\r\n    for i = 7, 9 do\r\n        pack[i] = pack[6] .. '+id>=2'\r\n    end\r\n    for i, _ in pairs(pack) do\r\n        if i == 6 or i == #pack then\r\n            pack[i] = pack[i]:gsub('r:%S+', getRandomRarity(9, 6, 3)) .. '+' .. landQuery\r\n        else\r\n            pack[i] = pack[i] .. '+-' .. landQuery\r\n        end\r\n    end\r\n    return pack\r\nend)\r\n\r\nfunction enqueueRequest(url, callback)\r\n    table.insert(requestQueue, { url = url, callback = callback })\r\nend\r\n\r\nfunction processRequestQueue()\r\n    if #requestQueue == 0 then\r\n        return\r\n    end\r\n    local req = table.remove(requestQueue, 1)\r\n    WebRequest.get(req.url, req.callback)\r\nend\r\n\r\nfunction getScryfallQueryTable()\r\n    local setCode = string.lower(getSetCode())\r\n    local mappedSetCode = setCodeMapping[setCode] or setCode\r\n    local packGenerator = BoosterPacks[mappedSetCode] or BoosterPacks.default\r\n    return packGenerator(setCode)\r\nend\r\n\r\nfunction fetchDeckData(urlTable, boosterID)\r\n    local setCode = getSetCode();\r\n    local deck = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 180, rotZ = 180, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Deck\",\r\n        Nickname = setCode .. \" Booster\",\r\n        Description = cardStackDescription,\r\n        DeckIDs = {},\r\n        CustomDeck = {},\r\n        ContainedObjects = {},\r\n    }\r\n\r\n    local requestsPending = #urlTable\r\n    local requestsCompleted = 0\r\n    local requestErrors = {}\r\n\r\n    for i, url in ipairs(urlTable) do\r\n        enqueueRequest(url, function(request)\r\n            if request.response_code ~= 200 then\r\n                local errorInfo = JSON.decode(request.text)\r\n                local message = errorInfo and errorInfo.details or (request.error .. \": \" .. request.text)\r\n                table.insert(requestErrors, { url = url, message = message })\r\n            else\r\n                local cardData = createCardDataFromJSON(request.text, i)\r\n                if cardData then\r\n                    deck.ContainedObjects[i] = cardData\r\n                    deck.DeckIDs[i] = cardData.CardID\r\n                    deck.CustomDeck[i] = cardData.CustomDeck[i]\r\n                end\r\n            end\r\n            requestsCompleted = requestsCompleted + 1\r\n        end)\r\n    end\r\n\r\n    Wait.condition(\r\n            function()\r\n                local cardNames = {}\r\n                local hasDuplicates = false\r\n                for _, card in ipairs(deck.ContainedObjects) do\r\n                    if cardNames[card.Nickname] then\r\n                        hasDuplicates = true\r\n                        break\r\n                    end\r\n                    cardNames[card.Nickname] = true\r\n                end\r\n\r\n                if hasDuplicates then\r\n                    fetchDeckData(urlTable, boosterID)\r\n                else\r\n                    local boosterContents = { }\r\n                    if setCode == \"---\" then\r\n                        local instructionNotecard = {\r\n                            Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                            Name = \"Notecard\",\r\n                            Nickname = \"SUPPORTED SETS\",\r\n                            Description = getSupportedSets(),\r\n                            Grid = false,\r\n                            Snap = false,\r\n                        }\r\n                        table.insert(boosterContents, instructionNotecard)\r\n                    else\r\n                        table.insert(boosterContents, deck)\r\n                    end\r\n\r\n                    if #requestErrors > 0 then\r\n                        for _, error in ipairs(requestErrors) do\r\n                            local errorNotecard = {\r\n                                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                                Name = \"Notecard\",\r\n                                Nickname = \"Booster Generation Error\",\r\n                                Description = \"url: \" .. error.url .. \"\\n\\n\" .. error.message,\r\n                                Grid = false,\r\n                                Snap = false,\r\n                            }\r\n                            table.insert(boosterContents, errorNotecard)\r\n                        end\r\n\r\n                        requestErrors = {}\r\n                    end\r\n\r\n                    boosterDataCache[boosterID] = boosterContents\r\n                end\r\n            end,\r\n            function()\r\n                return requestsPending == requestsCompleted\r\n            end\r\n    )\r\nend\r\n\r\nfunction getCardOracleText(cardFace)\r\n    local powerToughness = \"\"\r\n    if cardFace.power then\r\n        powerToughness = '\\n[b]' .. cardFace.power .. '/' .. cardFace.toughness .. '[b]'\r\n    elseif cardFace.loyalty then\r\n        powerToughness = '\\n[b]' .. tostring(cardFace.loyalty) .. '[/b]'\r\n    end\r\n    return (cardFace.oracle_text or \"\") .. powerToughness\r\nend\r\n\r\nfunction createCardDataFromJSON(jsonString, cardIndex)\r\n    local card = JSON.decode(jsonString)\r\n    if not card or not card.name then\r\n        error(\"Failed to decode JSON: \" .. jsonString)\r\n        return\r\n    end\r\n\r\n    local cardName = \"\"\r\n    local cardOracle = \"\"\r\n    local faceURL = \"\"\r\n    local backData = nil\r\n    local imageQuality = 'large'\r\n    local cacheBuster = (card.image_status ~= 'highres_scan') and ('?' .. os.date(\"%Y%m%d\")) or \"\"\r\n\r\n    local function getFormattedName(face, typeSuffix)\r\n        return string.format('%s\\n%s %s CMC %s', face.name:gsub('\"', ''), face.type_line, tostring(card.cmc or face.cmc or 0), typeSuffix or \"\"):gsub('%s$', '')\r\n    end\r\n\r\n    if card.card_faces then\r\n        if card.image_uris then\r\n            -- Split cards like Adventure\r\n            cardName = getFormattedName(card.card_faces[1])\r\n            for i, face in ipairs(card.card_faces) do\r\n                cardOracle = cardOracle .. getFormattedName(face) .. '\\n' .. getCardOracleText(face)\r\n                if i < #card.card_faces then\r\n                    cardOracle = cardOracle .. '\\n'\r\n                end\r\n            end\r\n            faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n        else\r\n            -- Transform / DFC\r\n            local face = card.card_faces[1]\r\n            local back = card.card_faces[2]\r\n            cardName = getFormattedName(face, 'DFC')\r\n            cardOracle = getCardOracleText(face)\r\n            faceURL = face.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n            local backURL = back.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n\r\n            local backCardIndex = cardIndex + 100\r\n            backData = {\r\n                Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n                Name = \"Card\",\r\n                Nickname = getFormattedName(back, 'DFC'),\r\n                Description = getCardOracleText(back),\r\n                Memo = card.oracle_id,\r\n                CardID = backCardIndex * 100,\r\n                CustomDeck = {\r\n                    [backCardIndex] = {\r\n                        FaceURL = backURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                        Type = 0, BackIsHidden = true, UniqueBack = false\r\n                    }\r\n                },\r\n            }\r\n        end\r\n    else\r\n        -- Normal card\r\n        cardName = getFormattedName(card)\r\n        cardOracle = getCardOracleText(card)\r\n        faceURL = card.image_uris.normal:gsub('%?.*', ''):gsub('normal', imageQuality) .. cacheBuster\r\n    end\r\n\r\n    local cardData = {\r\n        Transform = { posX = 0, posY = 0, posZ = 0, rotX = 0, rotY = 0, rotZ = 0, scaleX = 1, scaleY = 1, scaleZ = 1 },\r\n        Name = \"Card\",\r\n        Nickname = cardName,\r\n        Description = cardOracle,\r\n        Memo = card.oracle_id,\r\n        CardID = cardIndex * 100,\r\n        CustomDeck = {\r\n            [cardIndex] = {\r\n                FaceURL = faceURL, BackURL = config.backURL, NumWidth = 1, NumHeight = 1,\r\n                Type = 0, BackIsHidden = true, UniqueBack = false\r\n            }\r\n        },\r\n    }\r\n\r\n    if backData then\r\n        cardData.States = { [2] = backData }\r\n    end\r\n\r\n    return cardData\r\nend\r\n\r\nfunction getSupportedSets()\r\n    local packs = {}\r\n    local boxes = {}\r\n\r\n    for code, data in pairs(setImages) do\r\n        if data.pack then\r\n            table.insert(packs, data.code or string.upper(code))\r\n        end\r\n        if data.box then\r\n            table.insert(boxes, data.code or string.upper(code))\r\n        end\r\n    end\r\n\r\n    return (\"supported packs: \" .. table.concat(packs, \", \")\r\n            .. \"\\n\\n\"\r\n            .. \"supported boxes: \" .. table.concat(boxes, \", \"))\r\nend",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "f69f2e",
          "Name": "Custom_Model_Bag",
          "Transform": {
            "posX": -18.7328472,
            "posY": 3.42774987,
            "posZ": -4.53604841,
            "rotX": 4.90121529E-05,
            "rotY": 90.2308044,
            "rotZ": 7.319221E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "AltLookAngle": {
            "x": 0.0,
            "y": 0.0,
            "z": 0.0
          },
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": false,
          "Snap": false,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "MaterialIndex": -1,
          "MeshIndex": -1,
          "Number": 0,
          "CustomMesh": {
            "MeshURL": "https://steamusercontent-a.akamaihd.net/ugc/9779110528988615269/E9A65CD25256BFDB28AE4140FCB1D27BC71A5A8D/",
            "DiffuseURL": "https://steamusercontent-a.akamaihd.net/ugc/12555777445170015064/1F22F21DA19B1C5D668D761C2CA447889AE98A2A/",
            "NormalURL": "",
            "ColliderURL": "",
            "Convex": true,
            "MaterialIndex": 3,
            "TypeIndex": 6,
            "CustomShader": {
              "SpecularColor": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0
              },
              "SpecularIntensity": 0.0,
              "SpecularSharpness": 2.0,
              "FresnelStrength": 0.0
            },
            "CastShadows": true
          },
          "Bag": {
            "Order": 0
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": ""
        }
      ]
    }
  ]
}